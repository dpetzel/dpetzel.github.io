<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dave&#39;s Site</title>
    <link>http://www.dpetzel.info/post/</link>
    <description>Recent content in Posts on Dave&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dave@petzel.email (David Petzel)</managingEditor>
    <webMaster>dave@petzel.email (David Petzel)</webMaster>
    <copyright>Â© 2016 David Petzel</copyright>
    <lastBuildDate>Tue, 06 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.dpetzel.info/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Speeding Up Test Kitchen</title>
      <link>http://www.dpetzel.info/post/chef/speeding-up-test-kitchen/</link>
      <pubDate>Tue, 06 Jan 2015 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/chef/speeding-up-test-kitchen/</guid>
      <description>&lt;p&gt;This past week I was turned on to a tiny, but game changing (for me) gem named
&lt;code&gt;kitchen-sync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I tend to use test-kitchen in a wide variety of configurations. Sometimes I&amp;rsquo;m
using it to drive Vagrant, most of the time, I&amp;rsquo;m using it drive Docker, but
there are times when I need it to drive remove instances such as EC2. One
of my biggest pain points in this last configuration is the time it takes to
copy of the cookbooks to the remote machine. If you&amp;rsquo;ve got a cookbook that
has many dependencies (either directly or indirectly), this is a painful process.
It is especially aggravating because you&amp;rsquo;re probably only testing a change to
a single file, yet you have to wait for a billion other files that have not
changed to get copied again.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://github.com/coderanger/kitchen-sync&#34;&gt;kitchen-sync&lt;/a&gt;.  Put out
by Noah Kantrowitz (a Chef super star), This little gem saves so much time when
your doing iterative development. The initial creation of the instance still
takes time as all the files have to be copied, however your second run will
have the file copy step take only a second or two. In my case I&amp;rsquo;ve got one
&lt;strong&gt;really nasty&lt;/strong&gt; cookbook that has so many dependencies it was taking 10-12
minutes &lt;strong&gt;each converge&lt;/strong&gt;. Using kitchen-sync my subsequent runs take only a
couple seconds to copy the file.&lt;/p&gt;

&lt;p&gt;If you are doing any Chef development using test-kitchen and remote instances,
this is a &lt;strong&gt;must have&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jekyll with fenced code blocks</title>
      <link>http://www.dpetzel.info/post/jekyll-with-fenced-code-blocks/</link>
      <pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/jekyll-with-fenced-code-blocks/</guid>
      <description>&lt;p&gt;While hacking up some markdown files to use under Jekyll I hit a weird
issue where code blocks written with triple ticks (aka fenced code blocks)
wouldn&amp;rsquo;t render correctly.&lt;/p&gt;

&lt;p&gt;When writing markdown, I like to express code blocks using the
&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks&#34;&gt;fenced-code-blocks&lt;/a&gt;
syntax. I&amp;rsquo;m just getting up to speed with using Jekyll and after reading their
documentation I found I could use their &lt;code&gt;highlight&lt;/code&gt; liquid tag, but I just didn&amp;rsquo;t
care for the look and feel of that. I&amp;rsquo;m just used to the fenced style, so I
wanted to use that.&lt;/p&gt;

&lt;p&gt;If I did something like this, it would work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```
    my code snippet
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But doing this would result in the language getting included inside the code
block. Normally you&amp;rsquo;d see the language used as a guide for highlighting, and it
would not get actually output in the rendered content.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```console
    my code snippet
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a bit of digging and trial error I narrowed this down to the fact that
I was rendering with &lt;code&gt;kramdown&lt;/code&gt;. There were some mentions of the fenced code
blocks on &lt;a href=&#34;http://jekyllrb.com/docs/configuration/&#34;&gt;http://jekyllrb.com/docs/configuration/&lt;/a&gt; page, but it was not clear
to me what needed to happen. This is almost certainly a result of me being new
to Jekyll. I ended up determining that &lt;code&gt;Redcarpet&lt;/code&gt; is an alternate renderer to
&lt;code&gt;kramdown&lt;/code&gt;. So I added the following to my &lt;code&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;markdown: redcarpet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After making that change the fenced code blocks were now properly rendering
even with the language being specified.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modifying your PoshGit Prompt</title>
      <link>http://www.dpetzel.info/post/modifying-your-poshgit-prompt/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/modifying-your-poshgit-prompt/</guid>
      <description>&lt;p&gt;If your using &lt;a href=&#34;https://windows.github.com/&#34;&gt;Github for Windows&lt;/a&gt;, there is a
good chance you might be using the Powershell Git Shell. If your like me you
may want to customize how that prompt looks. Turns out this is not nearly as
trivial as it would initially seem.&lt;/p&gt;

&lt;p&gt;If your not familiar with PoshGit, you can read a little more about it on their
&lt;a href=&#34;https://github.com/dahlbyk/posh-git/blob/master/readme.md&#34;&gt;github page&lt;/a&gt;. In
a nutshell, this integration enhances your current Powershell prompt to provide
you with git related information right in your prompt. For anyone that uses
&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt;, it provides similar
functionality to that.&lt;/p&gt;

&lt;p&gt;Powershell allows you to override the prompt by configuring a &lt;a href=&#34;http://ss64.com/ps/syntax-prompt.html&#34;&gt;prompt function&lt;/a&gt; inside your profile.  So let&amp;rsquo;s pause here..
this &lt;em&gt;sounds&lt;/em&gt; simple enough, but the reality you&amp;rsquo;re profile is actually loaded
from one of a possible 4 files. Knowing exactly which one to edit is an adventure
on all on its own. That whole debacle is covered in detail at
&lt;a href=&#34;http://technet.microsoft.com/en-us/magazine/2008.10.windowspowershell.aspx&#34;&gt;http://technet.microsoft.com/en-us/magazine/2008.10.windowspowershell.aspx&lt;/a&gt;
so I&amp;rsquo;ll skip going into details there. We&amp;rsquo;ll leave it at knowing there is fairly
well documented (albeit cumbersome) methods of changing your Powershell prompt.&lt;/p&gt;

&lt;p&gt;Enter PoshGit. Since its nothing more than a wrapper around your existing
Powershell, it would seem logical that any shell customizations you may have
already applied would be used and PoshGit would extend upon that. Sad to say
that is not the case&amp;hellip; Now to be fair, the README for PoshGit does cover this,
but it takes a fair amount of connecting the dots to know that PoshGit is even
a thing. For me there was a series of research and trial and error that lead me
to learning what PoshGit was, the fact that it was part of Github for Windows,
and ultimately how to hack it to do what I wanted.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll skip over the pain and agony I went through getting from A to B. I&amp;rsquo;ll keep it
brief and say no amount of &lt;code&gt;profile.ps1&lt;/code&gt; hackery will work here.&lt;/p&gt;

&lt;p&gt;Instead the key to success lies in &lt;code&gt;C:\Users\&amp;lt;you&amp;gt;\AppData\Local\GitHub\PoshGit_3874a02de8ce2b7d4908a8c0cb302294358b972c\profile.example.ps1&lt;/code&gt;
(I don&amp;rsquo;t know if that GUID looking number changes between installations).
Despite its name, this file is actually &lt;strong&gt;not&lt;/strong&gt; a sample, but is the actual
profile that is loaded by GitHub for Windows when using Powershell as your shell.&lt;/p&gt;

&lt;p&gt;Start by creating a function named &lt;code&gt;global:prompt&lt;/code&gt; (I think just prompt might
also work). Inside that function make all your customizations, and then be sure
to include a call to &lt;code&gt;Write-VcsStatus&lt;/code&gt;. The &lt;code&gt;Write-VcsStatus&lt;/code&gt; is the key to
ensuring you continue to get all the git integration that PoshGit supplies.&lt;/p&gt;

&lt;p&gt;Here is what my function looks like. In my case I was looking to not have
super long directory structures included in the prompt, and instead just
display the name of the directory I&amp;rsquo;m currently in. Credit for this goes to
&lt;a href=&#34;http://winterdom.com/2008/08/mypowershellprompt&#34;&gt;http://winterdom.com/2008/08/mypowershellprompt&lt;/a&gt; which I used to figure out
how to change the prompt, I adapted for my own tastes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;function global:prompt {
  $cdelim = [ConsoleColor]::DarkCyan
  $chost = [ConsoleColor]::Green
  $cloc = [ConsoleColor]::Cyan

  write-host &amp;quot;$([char]0x0A7) &amp;quot; -n -f $cloc
  write-host &#39; {&#39; -n -f $cdelim
  write-host (split-path (pwd) -Leaf) -n -f $cloc
  write-host &#39;}&#39; -n -f $cdelim

  Write-VcsStatus

  $global:LASTEXITCODE = $realLASTEXITCODE
  return &amp;quot;&amp;gt; &amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your curious, this makes my shell look something like this (but with colors):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. All rights reserved.

Â§  {dpetzel.github.io} [master +1 ~0 -0 !]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the end of the day, the act of actually making the change wasn&amp;rsquo;t complicated
at all, however figuring out the &amp;laquo;what and where&amp;raquo; of what to change was a time
consuming process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remotely Enabling RDP</title>
      <link>http://www.dpetzel.info/post/remotely-enabling-rdp/</link>
      <pubDate>Wed, 30 Apr 2014 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/remotely-enabling-rdp/</guid>
      <description>&lt;p&gt;Nothing to exciting here, but its the 3rd or 4th time in recent history I&amp;rsquo;ve
had to go looking for this, so I figured I would write it down finally.&lt;/p&gt;

&lt;p&gt;There are times when a domain attached PC has RDP disabled for some reason.
The following snippet, which I adapted from
&lt;a href=&#34;http://oreilly.com/windows/archive/server-hacks-remote-desktop.html&#34;&gt;http://oreilly.com/windows/archive/server-hacks-remote-desktop.html&lt;/a&gt; makes it a
little quicker. Run this from a cmd prompt as a user with admin rights on the
remote host.&lt;/p&gt;

&lt;p&gt;{% highlight bat %}
set node=remote_pc_name
sc \%node% start RemoteRegistry
reg add &amp;laquo;\%node%\HKLM\System\CurrentControlSet\Control\Terminal Server&amp;raquo; /v fDenyTSConnections /d 0 /f
{% endhighlight %}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chocolatey is Awesome</title>
      <link>http://www.dpetzel.info/post/chocolatey-is-awesome/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/chocolatey-is-awesome/</guid>
      <description>&lt;p&gt;A while back a co-worker told me about Chocolately. I had taken a quick
look and it seemed interesting, but I kind of forgot about it after
that.&lt;/p&gt;

&lt;p&gt;Well today, I was setting up a new machine and I had a handful of things
I wanted to install. I was thinking to myself what a bummer it was going
to be to have fire up Google and search for each of the packageâs
download sites. Then I recalled Chocolately. In under 10 minutes flat I
had read the quick start, installed Chocolately, and installed a handful
of packages on the box. It was awesome and is something Windows has been
sorely missing for a very long time. So if you havenât already, go check
it out at &lt;a href=&#34;http://chocolatey.org/&#34;&gt;http://chocolatey.org/&lt;/a&gt;. Now I have to fight the urge to
start packing up my own stuff, and focus on the task at hand. Iâll have
to revisit the packaging process at a later date :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating from Windows 2003 SBS to Windows 2012 Standard Part I</title>
      <link>http://www.dpetzel.info/post/migrating-from-windows-2003-sbs-to-windows-2012-standard-part-i/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/migrating-from-windows-2003-sbs-to-windows-2012-standard-part-i/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently been tasked with migrating a Windows 2003 Small Business Server
to Windows 2013 Standard.&lt;/p&gt;

&lt;p&gt;Without getting into too much of the back story, the client purchased Windows
2003 SBS many moons ago, however they never leveraged anything except Active
Directory and File Sharing. They use their hosting provider&amp;rsquo;s web mail, and
don&amp;rsquo;t have an appetite to change that.&lt;/p&gt;

&lt;p&gt;Here are we many moons later and they are ready to upgrade. They&amp;rsquo;ve purchased a
new, fairly beefy, box running Windows 2012 Standard.&lt;/p&gt;

&lt;p&gt;After some discussions around the path they would prefer to take we&amp;rsquo;ve decided
we don&amp;rsquo;t want to have to touch all of the PCs and move them to a new domain,
and we&amp;rsquo;d like the upgrade to be as seamless as possible. To that end the decision
was made to attempt a &lt;em&gt;migration&lt;/em&gt;. This document will hopefully capture my
journey down this path. Its been at least 5 years since I&amp;rsquo;ve touched a &amp;laquo;real&amp;raquo;
domain controller, so a decent amount of reading is order, but from what I have
gathered so far this is not a standard conversion path, but it appears there
are some options.&lt;/p&gt;

&lt;h2 id=&#34;getting-prepared&#34;&gt;Getting Prepared&lt;/h2&gt;

&lt;p&gt;So I decided I&amp;rsquo;d blow away the existing installation of 2012 on the box and
lay down ESXi. I then re-installed 2012 fresh as a VM on the ESXi host. I also
performed a P2V on the existing Windows 2003 SBS host. The P2V process is
outside the scope of this document, but was actually pretty easy. This will
allow me to take snapshots, and even clone the VM for some trial runs
(I don&amp;rsquo;t have any lab hardware available for this).&lt;/p&gt;

&lt;p&gt;fter getting the SBS server virtualized, I proceed to configure the new 2013 box as a member server with a static IP. I ensured its primary DNS server was set to the SBS server. I did not configure any roles or features at all yet.&lt;/p&gt;

&lt;p&gt;Now that I&amp;rsquo;m ready to proceed, I started by installing the support tools
from &lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=15326&#34;&gt;http://www.microsoft.com/en-us/download/details.aspx?id=15326&lt;/a&gt;. With those
tools in place I ran through series of tests as outlined in &lt;a href=&#34;http://msmvps.com/blogs/mweber/archive/2012/07/30/upgrading-an-active-directory-domain-from-windows-server-2003-or-windows-server-2003-r2-to-windows-server-2012.aspx&#34;&gt;http://msmvps.com/blogs/mweber/archive/2012/07/30/upgrading-an-active-directory-domain-from-windows-server-2003-or-windows-server-2003-r2-to-windows-server-2012.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;{% highlight console %}&lt;br /&gt;
Dcdiag /v /c /d /e /s:&lt;sbs_server&gt; &amp;gt; c:\temp\dcdiag.log
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The first error logged was:
{% highlight console %}
    * Checking Service: IsmServ
        IsmServ Service is stopped on [SERVER]
    &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip; SERVER failed test Services
 {% endhighlight %}&lt;/p&gt;

&lt;p&gt;Based &lt;a href=&#34;http://blog.mpecsinc.ca/2008/07/sbs-dcdiag-produces-ismserv-error.html&#34;&gt;http://blog.mpecsinc.ca/2008/07/sbs-dcdiag-produces-ismserv-error.html&lt;/a&gt;,
it appears this is expected on SBS and safe to ignore, so doing just that.&lt;/p&gt;

&lt;p&gt;The next error up was:&lt;/p&gt;

&lt;p&gt;{% highlight console %}
      Starting test: systemlog
         * The System Event log test
         An Error Event occured.  EventID: 0xC0002719
            Time Generated: 11/28/2013   18:05:14
            (Event String could not be retrieved)
         &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;. SERVER failed test systemlog
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This seems to be related to a single event in my event log:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    Event Type: Error
    Event Source:   DCOM
    Event Category: None
    Event ID:   10009
    Date:       11/28/2013
    Time:       6:05:14 PM
    User:       N/A
    Computer:   SERVER
    Description:
    DCOM was unable to communicate with the computer sbs.ip.add.ress using any of the configured protocols.

    For more information, see Help and Support Center at http://go.microsoft.com/fwlink/events.asp.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t see any other occurrences of this error. I&amp;rsquo;m assuming I could clear the
event logs to not see, but I&amp;rsquo;d rather keep the event log history around, so I&amp;rsquo;m
going to ignore this for now.&lt;/p&gt;

&lt;p&gt;All the other tests passed, so I moved onto &lt;code&gt;Repadmin&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Repadmin /showrepl sbs_host /verbose /all /intersite &amp;gt;c:\repl.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing jumped out at me in this output. Next up &lt;code&gt;dnslint&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;  Dnslint /v /ad /s &amp;quot;DCipaddress&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one caught something interesting:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Notes:
One or more DNS servers is not authoritative for the domain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After reviewing the output I found that at some point in time someone had
created a local host file entry for localhost that was the IP of the server.
Traditionally I believe localhost resolves to 127.0.0.1, rather than the actual
box IP, so I simply commented out the file entry. After that &lt;code&gt;dnslint&lt;/code&gt; came
back clean.&lt;/p&gt;

&lt;p&gt;I skipped the &lt;code&gt;adreplstatus&lt;/code&gt; checks since this is a single node, and the tool
wanted me to install .net framework 4.0, which seemed heavy handed for a test
I didn&amp;rsquo;t care about.&lt;/p&gt;

&lt;p&gt;Next up I confirmed that both the &lt;code&gt;_msdcs.domain.local&lt;/code&gt; and &lt;code&gt;domain.local&lt;/code&gt; zones
were set to the &lt;code&gt;Active Directory-Integrated&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Next, I confirmed what level AD was currently at:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;Dsquery * cn=schema,cn=configuration,dc=domain,dc=local -scope base -attr objectVersion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returned a value of &lt;code&gt;30&lt;/code&gt; for me, which based on the link above means I&amp;rsquo;m
at the &lt;code&gt;Windows Server 2003&lt;/code&gt; which lines up with the version of SBS on the host.&lt;/p&gt;

&lt;p&gt;At this point I took a snapshot of the host as we are going to start making
changes soon.&lt;/p&gt;

&lt;h2 id=&#34;upgrading&#34;&gt;Upgrading&lt;/h2&gt;

&lt;h3 id=&#34;add-2012-server-as-new-domain-controller&#34;&gt;Add 2012 Server As New Domain Controller&lt;/h3&gt;

&lt;p&gt;In my case the SBS server was at the &lt;code&gt;Windows 2000&lt;/code&gt; level for &lt;strong&gt;both&lt;/strong&gt; the
Domain Functional Level, as well as the Forest Functional Level.
Using &lt;code&gt;Active Directory Domains and Trusts&lt;/code&gt; I increased both of these to the
&lt;code&gt;Windows 2003&lt;/code&gt; level. This was done on the SBS 2003 node. Since its a single
SBS box, I figure replication time is essentially 0 so after trolling the Event
Logs for a few minutes to ensure nothing weird popped up, I proceeded.&lt;/p&gt;

&lt;p&gt;I then stepped through the process of promoting the 2012 as a domain controller
which is well illustrated at  &lt;a href=&#34;http://blogs.technet.com/b/canitpro/archive/2013/05/05/step-by-step-adding-a-windows-server-2012-domain-controller-to-an-existing-windows-2003-network.aspx&#34;&gt;http://blogs.technet.com/b/canitpro/archive/2013/05/05/step-by-step-adding-a-windows-server-2012-domain-controller-to-an-existing-windows-2003-network.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the restart I noticed a few things that seemed off at first. The first
one was that I didn&amp;rsquo;t have a netlogon share on the new 2012 DC. Additionally
there were some errors in the event log. I found that the
&lt;code&gt;File Replication Service&lt;/code&gt; was stopped. It was set to automatic, so I started
it. After starting that service, I now had the netlogon share as well.&lt;/p&gt;

&lt;h3 id=&#34;update-dns-clients&#34;&gt;Update DNS Clients&lt;/h3&gt;

&lt;p&gt;At this point I updated the DNS settings on thew new 2012 server to reference
itself first.&lt;/p&gt;

&lt;p&gt;Once that was completed, I then update my DHCP configuration on the SBS 2003
box (I&amp;rsquo;ll move DHCP later), I updated the options to pass the new box as the
primary DNS server.&lt;/p&gt;

&lt;h3 id=&#34;transferring-fsmo-roles&#34;&gt;Transferring FSMO Roles&lt;/h3&gt;

&lt;p&gt;I then followed &lt;a href=&#34;http://blogs.technet.com/b/canitpro/archive/2013/05/27/step-by-step-active-directory-migration-from-windows-server-2003-to-windows-server-2012.aspx&#34;&gt;http://blogs.technet.com/b/canitpro/archive/2013/05/27/step-by-step-active-directory-migration-from-windows-server-2003-to-windows-server-2012.aspx&lt;/a&gt;
to transfer all the FSMO and related roles over to the new server.&lt;/p&gt;

&lt;h3 id=&#34;update-time-configurations&#34;&gt;Update Time Configurations&lt;/h3&gt;

&lt;p&gt;As touched on toward the end of the &lt;a href=&#34;http://msmvps.com/blogs/mweber/archive/2012/07/30/upgrading-an-active-directory-domain-from-windows-server-2003-or-windows-server-2003-r2-to-windows-server-2012.aspx&#34;&gt;http://msmvps.com/blogs/mweber/archive/2012/07/30/upgrading-an-active-directory-domain-from-windows-server-2003-or-windows-server-2003-r2-to-windows-server-2012.aspx&lt;/a&gt; I updated time settings as follows&lt;/p&gt;

&lt;p&gt;2012 Server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;w32tm /config /manualpeerlist:time.windows.com /syncfromflags:manual /reliable:yes /update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SBS 2003 Server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;w32tm /config /syncfromflags:domhier /reliable:no /update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point I&amp;rsquo;m going to let things bake for a bit. I&amp;rsquo;ve got all the &amp;laquo;AD Stuff&amp;raquo;
moved over. At this point I&amp;rsquo;m left with all the file shares and applications
(IE Virus Console) that are configured to point at this host.  As I get to
moving some of these items I&amp;rsquo;ll add new parts.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://social.technet.microsoft.com/Forums/windowsserver/en-US/3f0062c8-80b1-4322-8a15-6529289fcc4b/migrate-ad-from-2003-to-2012&#34;&gt;http://social.technet.microsoft.com/Forums/windowsserver/en-US/3f0062c8-80b1-4322-8a15-6529289fcc4b/migrate-ad-from-2003-to-2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msmvps.com/blogs/mweber/archive/2012/07/30/upgrading-an-active-directory-domain-from-windows-server-2003-or-windows-server-2003-r2-to-windows-server-2012.aspx&#34;&gt;http://msmvps.com/blogs/mweber/archive/2012/07/30/upgrading-an-active-directory-domain-from-windows-server-2003-or-windows-server-2003-r2-to-windows-server-2012.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.technet.com/b/canitpro/archive/2013/05/05/step-by-step-adding-a-windows-server-2012-domain-controller-to-an-existing-windows-2003-network.aspx&#34;&gt;http://blogs.technet.com/b/canitpro/archive/2013/05/05/step-by-step-adding-a-windows-server-2012-domain-controller-to-an-existing-windows-2003-network.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.technet.com/b/canitpro/archive/2013/05/27/step-by-step-active-directory-migration-from-windows-server-2003-to-windows-server-2012.aspx&#34;&gt;http://blogs.technet.com/b/canitpro/archive/2013/05/27/step-by-step-active-directory-migration-from-windows-server-2003-to-windows-server-2012.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Building a Dell T420 with ESXi 5</title>
      <link>http://www.dpetzel.info/post/building-a-dell-t420-with-esxi-5/</link>
      <pubDate>Sun, 24 Nov 2013 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/building-a-dell-t420-with-esxi-5/</guid>
      <description>

&lt;p&gt;I recently got the opportunity to play with a new Dell T420, and I decided I
would run ESXi 5 on it.&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;My day job does not really allow me much hands on access to hardware any more
so its been a while since I&amp;rsquo;ve gotten to build a new server, but I recently got
the chance to work on this as a side project. The server came
pre-installed with Windows 2012 Standard. I have a need to run a couple of VM&amp;rsquo;s and I
decided I wanted to run ESXi on the host, and run the 2013 standard box as
a VM. For anyone that is curious, I didn&amp;rsquo;t pick ESXi because its &amp;laquo;better&amp;raquo; than
Hyper-V (I have no clue how they stack up anymore). I simply chose it because
its been a couple of years since I&amp;rsquo;ve built an ESX host and I wanted to see
how things have evolved.&lt;/p&gt;

&lt;p&gt;The first thing I did was use the VMWare converter utility to P2V the existing
installation out to a VMWare workstation format. I didn&amp;rsquo;t &lt;em&gt;really&lt;/em&gt; need to do
this since the OS was not customized yet, and I could reinstall, but this
was a chance to play with the converter, and see if if I could PBV the existing
installation and have it running on the newly rebuilt box. It worked well,
and maybe I&amp;rsquo;ll write about that experience some day, but for now its all
about getting the box built.&lt;/p&gt;

&lt;h2 id=&#34;installing-open-manage-server-administrator&#34;&gt;Installing Open Manage Server Administrator&lt;/h2&gt;

&lt;p&gt;So step one was to grab the installation bits from
&lt;a href=&#34;http://www.dell.com/support/drivers/us/en/19/DriverDetails/Product/poweredge-r710?driverId=WHYNF&amp;amp;fileId=3006491785&#34;&gt;Open Manage Download&lt;/a&gt;.
I went with version 7.3.0.2 as it was the most recent available. It downloaded
the file to my workstation, as opposed to directly on the ESX host.&lt;/p&gt;

&lt;p&gt;Next I started following the ESXi specific instructions in the
&lt;a href=&#34;ftp://ftp.dell.com/Manuals/all-products/esuprt_software/esuprt_ent_sys_mgmt/esuprt_ent_sys_mgmt_opnmng_sw/dell-opnmang-sw-v7.3_User%27s%20Guide2_en-us.pdf&#34;&gt;Open Manage User Guide&lt;/a&gt;.
While I can appreciate the time it takes to work up instructions that cover such
a wide array of platforms, I found these instructions a bit lacking. They had
several typos (missing spaces in command line commands) as well as were unclear
on a couple things, so I&amp;rsquo;ll spend a little more time to add some details here.&lt;/p&gt;

&lt;p&gt;I chose to go with the &amp;laquo;Using The vSphere CLI&amp;raquo; portion of the instructions, as
it seemed to be the most straight forward for folks without existing ESX
infrastructures in place. So with that, I had to download and install the
&lt;a href=&#34;http://www.vmware.com/support/developer/vcli/&#34;&gt;vSphere CLI&lt;/a&gt;. This was pretty quick and painless. I didn&amp;rsquo;t poke to much
at it, but it feels like its nothing more than a set of Perl scripts and it
adds a shortcut to a CMD session which I presume just tweaks the shell with
some environment variables&lt;/p&gt;

&lt;p&gt;Now I copied the file over the suggested directory per the docs (I had to enable
 and start SSH access using the vSphere Client before this would work).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;   pscp OM-SrvAdmin-Dell-Web-7.3.0-588_A00.VIB-ESX51i.zip root@192.168.1.1:/var/log/vmware/
   Using keyboard-interactive authentication.
   Password:
   OM-SrvAdmin-Dell-Web-7.3. | 6490 kB | 1622.6 kB/s | ETA: 00:00:00 | 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I&amp;rsquo;m not sure how the docs assume you to unzip this, but I did it over an SSH
session, and the part that I messed up on first was that I unzipped the file
directly in &lt;code&gt;/var/log/vmware/&lt;/code&gt;, when in reality all you have to do is run the
install command against the ZIP directly. There is no need to actually unzip it.&lt;/p&gt;

&lt;p&gt;I later learned about the &lt;a href=&#34;http://www.vmware.com/support/developer/vima/&#34;&gt;vSphere Management Assistant&lt;/a&gt;,
which I think is geared toward keeping SSH out of the mix. for now I ran the
command using the CLI&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   esxcli --server 192.168.1.1 software vib install -d /var/log/vmware/OM-SrvAdmin-Dell-Web-7.3.0-588_A00.VIB-ESX51i.zip

   Installation Result
      Message: The update completed successfully, but the system needs to be rebooted for the changes to be effective.
      Reboot Required: true
      VIBs Installed: Dell_bootbank_OpenManage_7.3.0.2-0000
      VIBs Removed:
      VIBs Skipped:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then comes a reboot. Following the reboot I expected I would be able
to hit the OMSA HTTPS interface at &lt;a href=&#34;https://192.168.1.1:1311&#34;&gt;https://192.168.1.1:1311&lt;/a&gt;, however that didn&amp;rsquo;t
work, and it turns out is more more involved, and covered in the &amp;laquo;Accessing Server Administrator on VMware ESXi&amp;raquo;
section. Essentially it suggests that you have to a &lt;strong&gt;completely separate&lt;/strong&gt;,
server running the web server. In my case, this is the only box on the network
so this seems like a crappy solution, but I suppose the logic is possibly to
keep the number of system daemons to an absolute minimum. In any event, I was
a bit disappointed to lose the web UI I&amp;rsquo;ve grown to know.&lt;/p&gt;

&lt;h2 id=&#34;vsphere-management-assistant&#34;&gt;vSphere Management Assistant&lt;/h2&gt;

&lt;p&gt;At this point, I was a bit annoyed that I needed another system.
While trolling for ways to potentially hack the Web server in directly, I came
across a YouTube video on the subject at &lt;a href=&#34;http://www.youtube.com/watch?v=hywERi8bc1c&#34;&gt;http://www.youtube.com/watch?v=hywERi8bc1c&lt;/a&gt;.
While watching this at about 1:31 they jump to a screen I was not familiar with,
and after a little digging I discovered the
&lt;a href=&#34;http://www.vmware.com/support/developer/vima/&#34;&gt;vSphere Management Assistant&lt;/a&gt;,
so I proceeded to download and &lt;em&gt;install&lt;/em&gt; the virtual appliance as it seems it
will come in handy in the future as well.&lt;/p&gt;

&lt;p&gt;So I downloaded the appliance, unzipped the file and and then followed the
instructions at &lt;a href=&#34;http://pubs.vmware.com/vsphere-55/index.jsp#com.vmware.vma.doc/vima_get_start.4.5.html&#34;&gt;http://pubs.vmware.com/vsphere-55/index.jsp#com.vmware.vma.doc/vima_get_start.4.5.html&lt;/a&gt;.
This all went really smooth.&lt;/p&gt;

&lt;h2 id=&#34;installing-dell-omsa-into-the-vsphere-management-assistant&#34;&gt;Installing Dell OMSA into the vSphere Management Assistant&lt;/h2&gt;

&lt;p&gt;So I figured what the heck, at this point I have a VM already, lets install
the OMSA web interface here since I couldn&amp;rsquo;t do it earlier. So I downloaded
the file from the dell website (they make it harder than is should be to get a
direct download link that I could wget from inside the VM so instead I
downloaded it on my workstation and uploaded it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;pscp OM-SrvAdmin-Dell-Web-LX-7.3.0-350_A00.SLES11.x86_64.tar.gz vi-admin@192.168.1.2:/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then via an SSH into the VMA appliance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   cd /tmp
   tar -zxvf OM-SrvAdmin-Dell-Web-LX-7.3.0-350_A00.SLES11.x86_64.tar.gz
   sudo ./setup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Accept the license agreement, and hit option 1 to install the Server Administrator Web Server Interface.
Followed by pressing &amp;laquo;i&amp;raquo;&lt;/p&gt;

&lt;p&gt;And about 2 minutes later, we have our good old friend, the Open Manager web
interface available at https//vmaappliance_ip:1311, and I was able to use
it to connect to my ESXi host. A bit of a round about where to get there, but
something is better than nothing..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chromecast Woes</title>
      <link>http://www.dpetzel.info/post/chromecast-woes/</link>
      <pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/chromecast-woes/</guid>
      <description>&lt;p&gt;I finally got around to picking up a &lt;a href=&#34;http://en.wikipedia.org/wiki/Chromecast&#34;&gt;Chromecast&lt;/a&gt;. I had read some reviews
so I didn&amp;rsquo;t have any high expectations, but I couldn&amp;rsquo;t resist the urge to
tinker with it given its price point. Boy was I disappointed&amp;hellip;.&lt;/p&gt;

&lt;p&gt;The instructions it came with made it look like it was going to be the easiest thing
I ever hooked up. The physical hookup was simple enough, but then it came time
to get it hooked up to my wireless. I don&amp;rsquo;t have anything fancy, just a Linksys
E3200 with &lt;code&gt;WPA2/WPA Mixed Mode&lt;/code&gt; security. I&amp;rsquo;ve hooked up a ton of devices
and never had any issues.&lt;/p&gt;

&lt;p&gt;The Chromecast App was useless. It could see my Chromecast, but I
just kept getting a grey exclamation mark with a message saying it couldn&amp;rsquo;t
connect. I went back and forth with the online help and the only useful thing
I found was the link to the web based setup instructions located at
&lt;a href=&#34;https://cast.google.com/chromecast/setup?np=manualsetup&#34;&gt;https://cast.google.com/chromecast/setup?np=manualsetup&lt;/a&gt;. With this I was able
able to get a little further. I got as far as it displaying a 4 letter code
for me to confirm. Once I did that, it failed to connect again. What!?!?!
You can &lt;strong&gt;obviously&lt;/strong&gt; connect, since you just synced up that 4 letter code!!!
A bunch of google searching and nothing useful. Finally for no good reason other than
a lucky guess, I changed the network type on my Laptop &amp;ndash;&amp;gt; Chromecast wifi
network from Public to Home.&lt;/p&gt;

&lt;p&gt;Once I made that switch the Web based setup got a little bit further and it
prompted me for my wireless password. Entered and it failed to connect&amp;hellip;
For kicks I tried the application again, it was still useless, so back to the
web based setup.&lt;/p&gt;

&lt;p&gt;I ended up having to power off the Chromecast one more time and then running
through the setup wizard again. Finally I had it hooked up the wireless. While
I can appreciate the target audience probably needs the &amp;laquo;magic config&amp;raquo; I really
wish they would have just given me the &amp;laquo;I know what the eff I&amp;rsquo;m doing&amp;raquo; option
and just entered my wifi info directly.&lt;/p&gt;

&lt;p&gt;Once I had it connected, the native casting support in YouTube worked really well
I have a YouTube app native on my TV and the quality of the &lt;a href=&#34;http://en.wikipedia.org/wiki/Chromecast&#34;&gt;Chromecast&lt;/a&gt; was
better than the native app. Sadly, the &amp;laquo;cast my Chrome tab&amp;raquo; option didn&amp;rsquo;t have
the same quality. I tried to play a recent episode of the
&lt;a href=&#34;http://www.cbs.com/shows/big_bang_theory/&#34;&gt;The Big Bang Theory&lt;/a&gt;,
but the quality was terrible and it kept freezing. It was not watchable.&lt;/p&gt;

&lt;p&gt;The next test I did was to stream the Thursday Night Football game from nfl.com
This was a little better but still pretty choppy. I was able to reduce the
choppiness by dropping the quality down to 480p. Given that I cut the cord a
while back, the fact that I was able to watch a game that was not broadcast
on one of the national network channels was pretty cool. The game was watchable
(its playing as I write this), but its certainly not a great experience.&lt;/p&gt;

&lt;p&gt;So at the end of the day, the only thing I would consider a success was the YouTube
integration, but given I have the YouTube native app on my TV, I really don&amp;rsquo;t feel like
I gained anything. If your a techy/gadget person its worth the $35 as something fun
to play with, but as of right now I struggle to see it being a valuable addition
to my media consumption choices.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django 1.2 to 1.5 Upgrade</title>
      <link>http://www.dpetzel.info/post/django-12-to-15-upgrade/</link>
      <pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/django-12-to-15-upgrade/</guid>
      <description>

&lt;p&gt;Recently I kicked off an effort to perform a long over due upgrade of the
version of Django I am using on a project. Without getting into all the gory
details of why, I need to upgrade from Django 1.2 to 1.5. Technically I don&amp;rsquo;t
really have to go to 1.5, but I figure since I&amp;rsquo;m going to be messing with it
anyway I should probably just get current. This post will journal my adventure
down this road for better or worse. Just to satisfy curiosity, I did test
going from 1.2 to 1.5 directly and as expected things blew up horribly.&lt;/p&gt;

&lt;p&gt;Since I knew a ton of stuff had changed my plan attack was going to be to step
through each an upgrade to each major version between 1.2 and 1.5 rather than
attempting to jump straight there. I intend to run my tests with the &lt;code&gt;-Wall&lt;/code&gt;
flags so I can see all the deprecation warnings. Then I&amp;rsquo;ll tackle each
deprecation warning one at a time. There is likely a more efficient means of
doing this sort of thing, but its been so long since I&amp;rsquo;ve messed with this
project I&amp;rsquo;m going to need some time to get reacquainted anyway.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;note&#34;&gt; &lt;strong&gt;NOTE&lt;/strong&gt;
    To protect the innocent, any proprietary information include class names,
    file names, paths etc have been stripped from the code snippets.
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-2-7-to-1-3-7&#34;&gt;1.2.7 to 1.3.7&lt;/h2&gt;

&lt;p&gt;This wen&amp;rsquo;t really smooth for me. All my unit tests passed and I didn&amp;rsquo;t see
anything immediately broken. There were a few deprecation warnings that I needed
to address however.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    ./django/core/cache/__init__.py:83: PendingDeprecationWarning: settings.CACHE_* is deprecated; use settings.CACHES instead.
  PendingDeprecationWarning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one was pretty cut and dry as the 1.3 release notes had alerted me to this
one: &lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.3/#caching-changes&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.3/#caching-changes&lt;/a&gt;.
Simply changing the structure of that configuration item and all was well.&lt;/p&gt;

&lt;p&gt;Next up was&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    /filename.py:14: DeprecationWarning: A Field class whose get_db_prep_value method hasn&#39;t been updated to take `connection` and `prepared` arguments.
  class MyModelClass(models.Field):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A little google foo later and I ended up on &lt;a href=&#34;http://www.djangopro.com/2011/03/deprecation-warning-with-get_db_prep_value-for-django-1-3/&#34;&gt;http://www.djangopro.com/2011/03/deprecation-warning-with-get_db_prep_value-for-django-1-3/&lt;/a&gt;. The advise was to update to a newer version of &lt;code&gt;django-picklefield&lt;/code&gt;. I reviewed the
dependencies I had defined in the my &lt;code&gt;requirements.txt&lt;/code&gt; and I was using
&amp;lsquo;0.3.0&amp;rsquo;, which was newer than the &amp;lsquo;0.1.9&amp;rsquo; version recommended in the article,
and also appears to be the most current version available on pypi.python.org.&lt;/p&gt;

&lt;p&gt;With that dead end out of the way I then found &lt;a href=&#34;https://docs.djangoproject.com/en/1.3/howto/custom-model-fields/#django.db.models.Field.get_db_prep_value&#34;&gt;https://docs.djangoproject.com/en/1.3/howto/custom-model-fields/#django.db.models.Field.get_db_prep_value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I updated my &lt;code&gt;get_db_prep_value&lt;/code&gt; as follows.
Old:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def get_db_prep_value(self, value):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def get_db_prep_value(self, value, connection, prepared=False):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kicked another test run. No more deprecation warning and tests are all passing!&lt;/p&gt;

&lt;p&gt;Next up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    ./site-packages/Crypto/Util/randpool.py:40: RandomPool_DeprecationWarning: This application uses RandomPool, which is BROKEN in older releases.  See http://www.pycrypto.org/randpool-broken
  RandomPool_DeprecationWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It wasn&amp;rsquo;t really clear to me what I was supposed to do with this information,
so I figured I&amp;rsquo;d start simple and upgrade the version of pycrypto I&amp;rsquo;m using
from 2.3 to the latest available 2.6. This did &lt;em&gt;not&lt;/em&gt; help.. I really have no
clue what to do with this. Since its not coming out directly from a Django
module, I&amp;rsquo;m going to ignore it for now&amp;hellip;.&lt;/p&gt;

&lt;p&gt;Last up was&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    ./site-packages/django/test/simple.py:28: PendingDeprecationWarning: DjangoTestRunner is deprecated; it&#39;s functionality is indistinguishable from TextTestRunner
  PendingDeprecationWarning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recalled there was something about this in the release notes so I reviewed
&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.3/#djangotestrunner&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.3/#djangotestrunner&lt;/a&gt;. Near as
I can tell there is nothing I need to do here, and Django itself will handle
this cleanup in coming versions.&lt;/p&gt;

&lt;p&gt;That concludes my 1.2.7 to 1.3.7 upgrade. I ended up keeping the updated version
of pycrypto just because, so all and all pretty easy so far and only about 2
hours burned on that step.&lt;/p&gt;

&lt;h2 id=&#34;1-3-7-to-1-4-8&#34;&gt;1.3.7 to 1.4.8&lt;/h2&gt;

&lt;p&gt;With that section out of the way onto reading the 1.4 release notes to see
what gotchas I need to look out for. Based on the information in the release
notes here are the items I expect will require some attention:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.4/#django-conf-urls-defaults&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.4/#django-conf-urls-defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.4/#django-contrib-admin&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.4/#django-contrib-admin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An initial test run after upgrading, but before any changes, is showing that the
media stuff is indeed an issue, and I have several deprecation warnings related
to items addressed in the release notes. This isn&amp;rsquo;t going to be as easy as the
jump to 1.3.7 was&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m opting to tackle the broken things first, and then I&amp;rsquo;ll address the
deprecation warnings. So first up I&amp;rsquo;ve made a few customizations to my
settings.py file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I added &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; to my &lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Next I renamed my &lt;em&gt;media&lt;/em&gt; folder to &lt;em&gt;static&lt;/em&gt;. I don&amp;rsquo;t have user uploaded media
so this folder was for the purpose of static assets. And based on the
documentation media is intended to be used for user generated content.&lt;/li&gt;
&lt;li&gt;I added &lt;code&gt;STATIC_URL = &#39;/static/&#39;&lt;/code&gt; to my &lt;code&gt;settings.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Updated my templates to use the new static template tag as described in
&lt;a href=&#34;https://docs.djangoproject.com/en/dev/howto/static-files/&#34;&gt;https://docs.djangoproject.com/en/dev/howto/static-files/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While a bit tedious, that wasn&amp;rsquo;t to bad. At this point all of my tests are still
passing, but I do have some &lt;code&gt;PendingDeprecationWarning&lt;/code&gt; warnings to deal with.
I suppose since the are Pending, I could procrastinate, but I&amp;rsquo;m in here now, so
biting the bullet and going after them..&lt;/p&gt;

&lt;p&gt;First up&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   ./site-packages/django/core/management/__init__.py:455: PendingDeprecationWarning: The &#39;execute_manager&#39; function is deprecated, you likely need to update your &#39;manage.py&#39;; please see the Django 1.4 release notes (https://docs.djangoproject.com/en/dev/releases/1.4/).
  PendingDeprecationWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My imports worked out in such a way that I didn&amp;rsquo;t need to relocate the manage.py
file so all I did was swap out the contents as outlined in &lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alas, something busted though. After swapping out the contents of manage.py I
ended up with errors when trying to kick off my tests. I&amp;rsquo;m using the
django-jenkins app for my tests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   ./virtualenv/bin/python -Wall my_project/manage.py jenkins
   Unknown command: &#39;jenkins&#39;
   Type &#39;manage.py help&#39; for usage.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t see anything immediately obvious jump out at me so I started by
updating from django-jenkins 0.11.1 to 0.14.0. No improvment (but I&amp;rsquo;m gonna
keep the newer version just the same).&lt;/p&gt;

&lt;p&gt;Upon further inspection of &lt;code&gt;manage.py --help&lt;/code&gt; I noticed alot of the subcommands
were missing. In fact all I saw were the &lt;code&gt;[django]&lt;/code&gt; ones. So I moved my
&lt;code&gt;manage.py&lt;/code&gt; up one directory as discussed in the readme and all the subcommands
reappeared, including jenkins. So that was good, but the crappy things is
all my tests started failing&amp;hellip; So into the weeds of import cleanup I go..
This turned out to be much easier than I thought. All I needed was to change
ROOT_URLCONF = &amp;lsquo;urls&amp;rsquo;&lt;code&gt;to ROOT_URLCONF = &#39;my_project.urls&#39;&lt;/code&gt; and all of
tests started passing again. Added bonus, my PendingDeprecationWarning was gone.&lt;/p&gt;

&lt;p&gt;Next up&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   ./site-packages/django/conf/__init__.py:75: DeprecationWarning: The ADMIN_MEDIA_PREFIX setting has been removed; use STATIC_URL instead.
  &amp;quot;use STATIC_URL instead.&amp;quot;, DeprecationWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one is easy enough, I had already added STATIC_URL when I fixed up things
earlier, so I just removed ADMIN_MEDIA_PREFIX from my settings.py&lt;/p&gt;

&lt;p&gt;It appears in the process of cleaning up some of the media stuff I also cleared
up some of the other DeprecationWarning messages. So at this point all my tests
are passing and no DeprecationWarning messages (aside from
&lt;code&gt;RandomPool_DeprecationWarning&lt;/code&gt; from earlier that I opted to ignore). Onto
the final leg! Total time in this leg minus distractions was about 2.5 hours&lt;/p&gt;

&lt;h2 id=&#34;1-4-8-to-1-5-4&#34;&gt;1.4.8 to 1.5.4&lt;/h2&gt;

&lt;p&gt;Upon an initial pass through the 1.5 release notes I was feeling pretty good
as I didn&amp;rsquo;t see anything in there I though would affect me. My tests said
otherwise (&lt;strong&gt;80% failure rate&lt;/strong&gt;). The common theme seemed to be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   from django.views.generic.simple import direct_to_template, redirect_to
   ImportError: No module named simple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm&amp;hellip;. obviously I missed the memo somewhere&amp;hellip;Turns out I didn&amp;rsquo;t put two and
two together back in the my 1.3 steps as its called out there
&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.3/#function-based-generic-views&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.3/#function-based-generic-views&lt;/a&gt;.
Not to sure why I didn&amp;rsquo;t get any deprecation warnings along the way but oh well
lets get that fixed up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/11428427/no-module-named-simple-error-in-django&#34;&gt;http://stackoverflow.com/questions/11428427/no-module-named-simple-error-in-django&lt;/a&gt;
was the only remotely useful link I came up with in the first couple minutes
of searching. The common thread seems to stem from my urls.py file.&lt;/p&gt;

&lt;p&gt;It seems I have a sprinkling of &lt;code&gt;direct_to_template&lt;/code&gt; and &lt;code&gt;redirect_to&lt;/code&gt; being
used. Its fairly clear that I need to switch from &lt;em&gt;Function-based generic views&lt;/em&gt;
to &lt;em&gt;Class-based generic views&lt;/em&gt;, and as luck would have it the documentation has
an awesome mapping to pull that off at &lt;a href=&#34;https://docs.djangoproject.com/en/1.3/topics/generic-views-migration/&#34;&gt;https://docs.djangoproject.com/en/1.3/topics/generic-views-migration/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is what I did to my urls.py.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replaced &lt;code&gt;from django.views.generic.simple import direct_to_template, redirect_to&lt;/code&gt;
with &lt;code&gt;from django.views.generic.base import TemplateView, RedirectView&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replaced &lt;code&gt;redirect_to&lt;/code&gt; references with RedirectView as outlined in that
migration page&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;direct_to_template&lt;/code&gt; references with TemplateView as outlined in
that migration page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First I had something like this (some legacy stuff to handle when URLs changed)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   (r&#39;^base_prefix/(?P&amp;lt;new_url&amp;gt;.*)$&#39;, redirect_to, {&#39;url&#39;: &#39;/%(new_url)s&#39;}),
   changed to
   (r&#39;^base_prefix/(?P&amp;lt;new_url&amp;gt;.*)$&#39;, RedirectView.as_view(url={&#39;url&#39;: &#39;/%(new_url)s&#39;})),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That one seemed easy enough, however the next one is nastier.. Making it worse
was it was something I didn&amp;rsquo;t write so I had to figure out the previous
functionality first, before I could move forward. So I had a line that looked
like &lt;code&gt;(r&#39;^bar&#39;, direct_to_template, {&#39;template&#39;: &#39;foo/bar.html&#39;}, &#39;bar&#39;),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It took me a bit to figure out that the last &lt;em&gt;bar&lt;/em&gt; was actually just a
&lt;code&gt;named url pattern &amp;lt;https://docs.djangoproject.com/en/1.2/topics/http/urls/#naming-url-patterns&amp;gt;&lt;/code&gt;_&lt;/p&gt;

&lt;p&gt;So a simple switch of that call over to &lt;code&gt;(r&#39;^bar&#39;, TemplateView.as_view(template_name=&#39;foo/bar.html&#39;), &#39;bar&#39;),&lt;/code&gt;
and we&amp;rsquo;re moving along.&lt;/p&gt;

&lt;p&gt;Next up is more generic view good times&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   from django.views.generic import list_detail
   ImportError: cannot import name list_detail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case this actually turned out to be an unused import, so I simply
removed it.&lt;/p&gt;

&lt;p&gt;From there I had to a bunch of conversions of my url template tags as outlined
in the release notes. So I had a lot of references like
{% raw %}&lt;code&gt;{% url myproject.myapp.views.someview arg1%}&lt;/code&gt;{% endraw %} and I had to change those to
{% raw %}&lt;code&gt;{% url &amp;quot;myproject.myapp.views.someview&amp;quot; arg1%}&lt;/code&gt;{% endraw %}.&lt;/p&gt;

&lt;p&gt;At this point I&amp;rsquo;m back to 100% testing pass rate and a single (simple)
deprecation message to handle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   ./site-packages/django/conf/__init__.py:147: PendingDeprecationWarning: The TEMPLATE_DIRS setting must be a tuple. Please fix your settings, as auto-correction is now deprecated.
     PendingDeprecationWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wish they were all this easy. I went from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   TEMPLATE_DIRS = os.path.join(PROJECT_DIR, &#39;templates&#39;)
   to
   TEMPLATE_DIRS = (os.path.join(PROJECT_DIR, &#39;templates&#39;),)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall the process wasn&amp;rsquo;t terrible, but it was certainly not a cake walk either.
By the time it was all said and done, it took me about 2 days (including
randomizations and interruptions). As usual the Django documentation was
invaluable in being to pull this off.&lt;/p&gt;

&lt;p&gt;The app has been running for a few days now and so far no unexpected explosions,
however I should note I have been getting some random reports of CSRF errors
since the upgrade (1 or 2 reports a day). Overall most people are having no
issues, and I haven&amp;rsquo;t gotten too deep into that investigation, but it is
certainly new behavior.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sphinx With External Image Annoyance</title>
      <link>http://www.dpetzel.info/post/sphinx-with-external-image-annoyance/</link>
      <pubDate>Tue, 24 Sep 2013 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/sphinx-with-external-image-annoyance/</guid>
      <description>&lt;p&gt;So today I was trying to clean up some of my Sphinx build warnings when
rendering this site. I got everything fixed so I had no errors or
warnings except for this little guy right here (truncated for easier
reading):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/dpetzel.info.tinkerer/2011/12/16/developing_a_command_parser_based_zenpack.rst:328: WARNING: nonlocal image URI found: https://external.domain/image.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know I&amp;rsquo;m linking to an external image. I don&amp;rsquo;t want to store my binary
images in my Github repo .&lt;/p&gt;

&lt;p&gt;I search google for a bit and couldn&amp;rsquo;t find anything. This was so
annoying!! I don&amp;rsquo;t want these warnings every build to numb me to real
warnings so I I wanted to suppress them.&lt;/p&gt;

&lt;p&gt;Well, since this is just Python lets get to work&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ grep -Rn &amp;quot;nonlocal image URI found&amp;quot; ~/virtualenvs/tinkerer/lib/python2.7/site-packages/
/home/dave/virtualenvs/tinkerer/lib/python2.7/site-packages/sphinx/environment.py:779:                self.warn_node(&#39;nonlocal image URI found: %s&#39; % imguri, node)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I edited line 779 in the file from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    if imguri.find(&#39;://&#39;) != -1:
        self.warn_node(&#39;nonlocal image URI found: %s&#39; % imguri, node)
        candidates[&#39;?&#39;] = imguri
        continue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to end up with:
{% highlight python %}
    if imguri.find(&amp;rsquo;://&amp;lsquo;) != -1:
        # self.warn_node(&amp;lsquo;nonlocal image URI found: %s&amp;rsquo; % imguri, node)
        candidates[&amp;lsquo;?&amp;rsquo;] = imguri
        continue
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Voila! No more warning for external images. If anyone knows the
&lt;strong&gt;right&lt;/strong&gt; way to suppress these warnings (Yes I&amp;rsquo;ve read all the reasons
why you shouldn&amp;rsquo;t) please let me know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Converting Zenoss VMWare Virtual Appliance to VirtualBox</title>
      <link>http://www.dpetzel.info/post/zenoss/Converting%20Zenoss%20VMWare%20Virtual%20Appliance%20to%20VirtualBox/</link>
      <pubDate>Fri, 10 Feb 2012 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/zenoss/Converting%20Zenoss%20VMWare%20Virtual%20Appliance%20to%20VirtualBox/</guid>
      <description>

&lt;p&gt;So you can use the VMWare Appliance Zenoss Inc. provides under VirtualBox&lt;/p&gt;

&lt;h2 id=&#34;instructions&#34;&gt;Instructions&lt;/h2&gt;

&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;

&lt;p&gt;Download the existing VMware Image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /tmp
wget http://downloads.sourceforge.net/project/zenoss/zenoss-alpha/4.1.70-1427/zenoss-4.1.70-1427-x86_64.vmware.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unzip the downloaded zip file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unzip zenoss-4.1.70-1427-x86_64.vmware.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new VirtualBox VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VM_NAME=&amp;quot;Zenoss_4.1_Appliance&amp;quot;
VM_BASE_PATH=/VMs
sudo mkdir $VM_BASE_PATH
sudo chmod 777 $VM_BASE_PATH
VBoxManage createvm --name $VM_NAME --basefolder $VM_BASE_PATH --register
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move the VMDK file over to the VM&amp;rsquo;s directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv zenoss-4.1.70-1427-x86_64.vmdk $VM_BASE_PATH/$VM_NAME/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change Settings on the newly created VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VBoxManage modifyvm $VM_NAME --ostype RedHat_64 --memory 2048 --nic1 nat --nictype1 82545EM --ioapic on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attach the VMDK file to the VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VBoxManage storagectl $VM_NAME --name &amp;quot;SCSI Controller&amp;quot; --add scsi --controller LsiLogic
VBoxManage storageattach $VM_NAME --storagectl &amp;quot;SCSI Controller&amp;quot; --type hdd --port 0 --medium $VM_BASE_PATH/$VM_NAME/zenoss-4.1.70-1427-x86_64.vmdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a DVD/CD Drive (At a minimum you&amp;rsquo;ll need this for installing Guest Additions):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VBoxManage storagectl $VM_NAME --name &amp;quot;IDE Controller&amp;quot; --add ide --controller PIIX4
VBoxManage storageattach $VM_NAME --storagectl &amp;quot;IDE Controller&amp;quot; --type dvddrive --port 1 --device 0 --medium emptydrive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Power on the new Virtual Machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VBoxManage startvm $VM_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the VM has started up, log into the console and Remove VMWare Tools:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vmware-uninstall-tools.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the VirtualBox documentation to install VirtualBox Guest Additions&lt;/p&gt;

&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;

&lt;p&gt;Lets get our powershell on&amp;hellip;All commands are run in a power shell prompt&lt;/p&gt;

&lt;p&gt;Setup some Variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$buildNumber = &amp;quot;4.1.70-1434&amp;quot;
$arch = &amp;quot;x86_64&amp;quot;  
$baseFileName = &amp;quot;zenoss-$buildNumber-$arch&amp;quot;
$zipFileName = &amp;quot;$baseFileName.vmware.zip&amp;quot;
$zipFileDownloadUrl = &amp;quot;http://downloads.sourceforge.net/project/zenoss/zenoss-alpha/$buildNumber/$zipFileName&amp;quot;

$VM_NAME=&amp;quot;Zenoss_Appliance_$buildNumber&amp;quot;
$VM_BASE_PATH=&amp;quot;VMs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the existing VMware Image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd temp
$webclient = New-Object System.Net.WebClient
echo &amp;quot;Going to Download File. This will take a long time without output. Be Patient&amp;quot;
$webclient.DownloadFile($zipFileDownloadUrl,&amp;quot;$pwd$zipFileName&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unzip the downloaded zip file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$shell_app=new-object -com shell.application
$zip_file = $shell_app.namespace((Get-Location).Path + &amp;quot;$zipFileName&amp;quot;)
$destination = $shell_app.namespace((Get-Location).Path)
$destination.Copyhere($zip_file.items())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new VirtualBox VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;if ((Test-Path -path $VM_BASE_PATH) -ne $True){New-Item $VM_BASE_PATH -type directory}
VBoxManage createvm --name $VM_NAME --basefolder $VM_BASE_PATH --register
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move the VMDK file over to the VM&amp;rsquo;s directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;mv $baseFileName$baseFileName.vmdk $VM_BASE_PATH$VM_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change Settings on the newly created VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;VBoxManage modifyvm $VM_NAME --ostype RedHat_64 --memory 2048 --nic1 nat --nictype1 82545EM --ioapic on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attach the VMDK file to the VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;VBoxManage storagectl $VM_NAME --name &amp;quot;SCSI Controller&amp;quot; --add scsi --controller LsiLogic
VBoxManage storageattach $VM_NAME --storagectl &amp;quot;SCSI Controller&amp;quot; --type hdd --port 0 --medium $VM_BASE_PATH$VM_NAME$baseFileName.vmdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a DVD/CD Drive (At a minimum you&amp;rsquo;ll need this for installing Guest Additions):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;VBoxManage storagectl $VM_NAME --name &amp;quot;IDE Controller&amp;quot; --add ide --controller PIIX4
VBoxManage storageattach $VM_NAME --storagectl &amp;quot;IDE Controller&amp;quot; --type dvddrive --port 1 --device 0 --medium (get-command VBoxGuestAdditions.iso).Path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some Optional Port forwards I find useful:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;VBoxManage controlvm $VM_NAME natpf1 &amp;quot;SSH,tcp,,8022,,22&amp;quot;
VBoxManage controlvm $VM_NAME natpf1 &amp;quot;ZOPE,tcp,,8080,,8080&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Power on the new Virtual Machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;VBoxManage startvm $VM_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the VM has started up, log into the console (root/zenoss) and Remove VMWare Tools:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vmware-uninstall-tools.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While still logged into the console, install VirtualBox guest additions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum -y install bzip2 make gcc
mkdir /media/ga
mount /dev/cdrom /media/ga
/media/ga/VBoxLinuxAdditions.run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reboot for good measure&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;reboot
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Developing a Command Parser Based ZenPack</title>
      <link>http://www.dpetzel.info/post/zenoss/developing_a_command_parser_based_zenpack/</link>
      <pubDate>Fri, 16 Dec 2011 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/zenoss/developing_a_command_parser_based_zenpack/</guid>
      <description>

&lt;h1 id=&#34;inspiration&#34;&gt;Inspiration&lt;/h1&gt;

&lt;p&gt;I still consider myself a relative newb with Zenoss as well as Python development.
A while back I set out to write a custom &lt;code&gt;ZenPack for use with F5 LTMs&lt;/code&gt;_. I never
would have been able to figure this out without the assistance of a great guide
written by Jane Curry. Her outstanding document can be found on the Zenoss
community site: &lt;a href=&#34;http://community.zenoss.org/docs/DOC-10268&#34;&gt;http://community.zenoss.org/docs/DOC-10268&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recently had a need for a ZenPack to interact with a couple of Varnish 3.x
servers. I scoured the net of course hoping someone had already done the work
for me, but no such luck. I did come across a few solutions for 2.x, but
from what I&amp;rsquo;ve been able to gather the interface to get these stats has changed some
(no more fetching stats over the management port). So I set out to write my own.&lt;/p&gt;

&lt;p&gt;I of course cracked Jane&amp;rsquo;s document open, but I quickly realized that it was very
SNMP-centric. This was perfect for the F5 pack as the device supports SNMP. However,
in this case SNMP is not an option. I&amp;rsquo;ve done enough research to know that what
I wanted to do is a custom Command Parser. The good news is that most of the concepts
from Jane&amp;rsquo;s doc still applied, the bad news is that the mechanics were going to be
very different.&lt;/p&gt;

&lt;p&gt;I searched around a bit and I was able to find a few other ZenPacks that had taken
this approach, but I couldn&amp;rsquo;t find any &amp;laquo;how-to&amp;raquo; style documentation. As I mentioned
before I don&amp;rsquo;t consider myself a seasoned Python developer so for me reverse-engineering
someone&amp;rsquo;s else&amp;rsquo;s ZenPack would be a challenge. There is a small snippet of
information in the &lt;code&gt;Zenoss Developer&#39;s Guide&lt;/code&gt;_, but its far from a walk-through or
step-by-step guide like Jane&amp;rsquo;s document.&lt;/p&gt;

&lt;p&gt;So I came to the sad realization that the approach was going to have to be looking
at what others had already done. So I figured I should probably document the process
and make it available to others in case they find themselves in a similar situation.&lt;/p&gt;

&lt;h1 id=&#34;conventions-and-assumptions&#34;&gt;Conventions and Assumptions&lt;/h1&gt;

&lt;p&gt;Throughout this document I hope to link to existing documentation where it exists
so for things that are already covered elsewhere I will try and link to them, rather
than recreate similar documentation.&lt;/p&gt;

&lt;p&gt;Nearly everything done from the command line on a Zenoss server should be done
while logged in as the Zenoss user (as opposed to root). Whenever I say &lt;em&gt;as the zenoss user&lt;/em&gt;
that means:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh root@your_zenoss_server
su - zenoss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When it comes to breaking down code, I&amp;rsquo;m going to try and display the minimal
amount of code to make my point. Some of the files might have alot of extra
code that has nothing to do with the effort of writing a command parser. An
example of this would be all of the code needed to parse the output of &lt;em&gt;varnishstat&lt;/em&gt;.
The mechanics of parsing the data and how its laid out is not within the scope of
this document. Its more important that we identify how we get to the point of
being able to parse the output, as well as how to take the parsed output
and use it to graph data. Since all the files we talk about are open source
and part of the ZenPack, it would be redundant to fully copy the contents of files
into this guide.&lt;/p&gt;

&lt;h1 id=&#34;lets-get-to-it&#34;&gt;Lets Get To It&lt;/h1&gt;

&lt;h2 id=&#34;create-your-empty-zenpack-shell&#34;&gt;Create Your Empty ZenPack Shell&lt;/h2&gt;

&lt;p&gt;Creating an empty ZenPack is covered in numerous locations so I won&amp;rsquo;t dive into the
details here. If you don&amp;rsquo;t know how to create an empty shell, refer to section
3.2 of the &lt;code&gt;Zenoss Developer&#39;s Guide&lt;/code&gt;&lt;em&gt;. Additionally Jane&amp;rsquo;s
&lt;code&gt;Creating Zenoss ZenPacks for Zenoss 3&lt;/code&gt;&lt;/em&gt; covers it in section 2.1.
In this case we will be creating &lt;strong&gt;ZenPacks.community.Varnish3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the empty shell is created, you will certainly want to move it &lt;em&gt;out&lt;/em&gt; of the
main ZenPack directory and into a seperate folder which we will put under
source control. My Zenoss development instance is running on a Virtual Box VM
and I store the files in a shared folder. This is personal preference,
feel free to put the files anywhere you want, just remember that every time I
reference &amp;lsquo;/media/zenpack_git_sources/ZenPacks.community.Varnish3/&amp;rsquo; you should
replace that with whatever folder you copied your pack out to. Here is what I ran
&lt;em&gt;as the zenoss user&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -R $ZENHOME/ZenPacks/ZenPacks.community.Varnish3 /media/zenpack_git_sources/ZenPacks.community.Varnish3
zenpack --link --install=/media/zenpack_git_sources/ZenPacks.community.Varnish3
zenoss restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full restart is arguably overkill, but I find knowing which situations require
restarting which daemons to be inconsistent so while it takes longer, I usually just
do a full restart rather than pick and choose which daemons to restart.&lt;/p&gt;

&lt;h2 id=&#34;initialize-a-new-git-repo-in-your-zenpack-folder&#34;&gt;Initialize a new GIT Repo in your ZenPack Folder&lt;/h2&gt;

&lt;p&gt;As Zenoss seems to be making the move to GitHub as outlined in &lt;code&gt;ZenPack Development Process&lt;/code&gt;_
we are going to cooperate with that effort :) The &lt;code&gt;ZenPack Development Process&lt;/code&gt;_
document does a good job already of providing both abbreviated as well as in-depth
explanation of the process. For me I&amp;rsquo;ve got the GIT client on my Zenoss VM, rather
than my host PC, but since we are using shared folders it should work equally well
from either. Here is what I ran &lt;em&gt;as the zenoss user&lt;/em&gt; to initialize the new repo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd /media/zenpack_git_sources/ZenPacks.community.Varnish3
 git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this is the first time using git under the zenoss user login you need
probably need to setup your user name and email:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; git config --global user.name &amp;quot;Firstname Lastname&amp;quot;
 git config --global user.email &amp;quot;your_email@youremail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I grabbed the &amp;lsquo;master&amp;rsquo; .gitignore file. Still &lt;em&gt;as the zenoss user&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd /media/zenpack_git_sources/ZenPacks.community.Varnish3
 wget https://raw.github.com/zenoss/Community-ZenPacks-SubModules/master/.gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally I use Eclipse with the pydev module on my PC as my IDE. As a result
there are a couple of extra files we will want to add to the .gitignore file.
If you use some other IDE (or none at all) you can skip the following lines.
Still &lt;em&gt;as the zenoss user&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd /media/zenpack_git_sources/ZenPacks.community.Varnish3
 echo .pydevproject &amp;gt;&amp;gt; .gitignore
 echo .project &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add everything and do a commit. You should note that this commit does &lt;strong&gt;not&lt;/strong&gt;
push anything up to GitHub, it simply commits the files into your local repo.
Once again, run the following &lt;em&gt;as the zenoss user&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; git add -A
 git status
 git commit -m &#39;Commiting the initial empty shell&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we&amp;rsquo;ve done the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Created the empty ZenPack shell&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve relocated it outside of Zenoss installation directory&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve initialized a new &lt;em&gt;local&lt;/em&gt; GIT repository&lt;/li&gt;
&lt;li&gt;Added a few IDE specific files that should be ignored from source control&lt;/li&gt;
&lt;li&gt;Committed everything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now comes the fun part&amp;hellip; figuring out how to actually write this crazy thing:)&lt;/p&gt;

&lt;h2 id=&#34;identifying-the-pieces&#34;&gt;Identifying The Pieces&lt;/h2&gt;

&lt;p&gt;Before we get to far, its important to understand what items we want to include
in this ZenPack. This is where it starts to get dicey if you don&amp;rsquo;t know some of the
inner workings of Zenoss. I&amp;rsquo;ll do my best to explain or link to other documentation
on each item.&lt;/p&gt;

&lt;p&gt;Monitoring Template
+++++++++++++++++++
Monitoring Templates, also called RRD Templates, are the real meat to getting
your performance data displayed. We will be creating one monitoring template.
This template will be used to trend various performance metrics.&lt;/p&gt;

&lt;p&gt;Command Parser
++++++++++++++
The whole reason for this document&amp;hellip;&amp;hellip; We&amp;rsquo;ll be running the &lt;em&gt;varnishstat&lt;/em&gt;
command over SSH and parsing the output to get all the data to graph. The
&lt;code&gt;Zenoss Developer&#39;s Guide&lt;/code&gt;_ talks about this in section 12.5.2. Its not very
newb friendly so thats where I hope to bridge the gap.&lt;/p&gt;

&lt;h2 id=&#34;building-the-pieces&#34;&gt;Building The Pieces&lt;/h2&gt;

&lt;p&gt;The Command Parser
++++++++++++++++++
Lets create the file that will hold our new command parser:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /media/zenpack_git_sources/ZenPacks.community.Varnish3/ZenPacks/community/Varnish3/parsers
touch /media/zenpack_git_sources/ZenPacks.community.Varnish3/ZenPacks/community/Varnish3/parsers/VarnishStat.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The contents of my VarnishStat.py contain a good bit more than what I am showing
below, however most of the code in that file is used for the actual parsing
of the varnishstat output and has nothing to do with creating a command parser.
The number of items actually required in the command parser is actually much
smaller than I thought would be required when I started out.&lt;/p&gt;

&lt;p&gt;First we start with the necessary imports. There is really only one required:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from Products.ZenRRD.CommandParser import CommandParser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup logging. This is technically not required, but Python makes logging
so easy its really a crime to not use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; import logging
 logger = logging.getLogger(&#39;.&#39;.join([&#39;zen&#39;, __name__]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;laquo;logger =&amp;raquo; line warrants a little explanation. The Python logging module
works some magic with name spaces so an application (in this case ZenCommand) can
decide on a logging namespace. In this case Zenoss uses the zen.* name space.
This means any loggers we create that start with &amp;laquo;zen.&amp;raquo; will automatically inherit
the logging settings already defined by ZenCommand helping us to ensure a
consistent look and feel. The &amp;laquo;&lt;strong&gt;name&lt;/strong&gt;&amp;raquo; piece simply appends the module name
onto the logger name. I like to do this so it is crystal clear what module a log
entry came from.&lt;/p&gt;

&lt;p&gt;Next we need to create our new command parser class as such:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class VarnishStat(CommandParser):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing I found the hardware way is that it appears &lt;strong&gt;Zenoss makes some
assumptions that the class name match the module name&lt;/strong&gt; (including case). So
as you can see in this example we&amp;rsquo;ve created class &lt;strong&gt;VarnishStat&lt;/strong&gt; inside of
file &lt;strong&gt;VarnishStat.py&lt;/strong&gt;. Notice the matching names and case. Additionally the
class should extend the &lt;em&gt;CommandParser&lt;/em&gt; class we imported above.&lt;/p&gt;

&lt;p&gt;Now we need to define our single &lt;em&gt;required&lt;/em&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def processResults(self, cmd, result):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the surface it looks simple enough, but there is actually alot of magic going
on here. First the method &lt;strong&gt;has&lt;/strong&gt; to be called &lt;em&gt;processResults&lt;/em&gt;. Additionally
it should accept &lt;em&gt;cmd&lt;/em&gt; and &lt;em&gt;result&lt;/em&gt; as input paramaters. The two input parameters
which are passed automatically by ZenCommand when it invokes your processResults
method are the keys to success here. I&amp;rsquo;ll do my best to describe the important
parts (that I am aware of).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;cmd&lt;/strong&gt; is an instance of the Products.ZenRRD.zencommand.Cmd object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;cmd.command&lt;/em&gt;: This will contain the command line that was executed. This is
useful if you have a command line that might change, or if you need to validate
that proper flags were used.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cmd.points&lt;/em&gt;: This is a list of the datapoints being requested from your
monitoring template. This one took me a few minutes to get my head around
so I&amp;rsquo;ll go into a bit of detail. I&amp;rsquo;ll show you a visual when we talk about
the monitoring template, but for now. Assume our monitoring template is
named &lt;em&gt;Varnish3&lt;/em&gt; and our datasource is named &lt;em&gt;Varnish3Stats&lt;/em&gt; . We will have
only one datasource, but we will have multiple datapoints (one for each stat).
Lets say we defined two datapoints named &lt;em&gt;cache_hit&lt;/em&gt; and &lt;em&gt;cache_miss&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When our &lt;em&gt;processResults&lt;/em&gt; is invoked cmd.points will contain two Datapoint
 &lt;strong&gt;objects&lt;/strong&gt;. If printed they look like:
 [({}, &amp;lsquo;cache_hit&amp;rsquo;), ({}, &amp;lsquo;cache_miss&amp;rsquo;)]
 Its important to understand that these are Datapoint objects, and not
 simply strings representing the names of the Datapoints.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;cmd.result&lt;/em&gt;: Is an object instance which contains additional information
about the results of the executed command.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;cmd.result.output&lt;/em&gt;: This is the text that was returned from the invoked
command. &lt;strong&gt;&lt;em&gt;This is what you want to parse&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;cmd.result.exitCode&lt;/em&gt;: This the return code from the invoked command.
There is a good chance you want to levarage this and only attempting
parsing on a valid return code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;results&lt;/strong&gt; is a ParsedResults object which at the time your method is called
contains two empty lists: &lt;em&gt;events&lt;/em&gt; and &lt;em&gt;values&lt;/em&gt;. These will be populated by
your &lt;em&gt;processResults&lt;/em&gt; method. The results object is discussed a bit in
section 12.5.2 of the &lt;code&gt;Zenoss Developer&#39;s Guide&lt;/code&gt;_&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;result.events&lt;/em&gt;: This is a list which will have the end result of
creating events which will show up in the event console. As you may or
may not use them, I&amp;rsquo;m not going to go into alot of detail, but you can
see an example usage in the &lt;em&gt;_errors_found&lt;/em&gt; method of the VarnishStat
parser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;result.values&lt;/em&gt;: This is the list you&amp;rsquo;ll use to return values for each
datapoint which will end up in the actual RRD files. This ends up being
a list of tuples, where each tuple is a datapoint, value pairing. In this
context the datapoint is the actual datapoint object, and not the string
representation of the datapoint name. A very contrived example of this
would look like:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  for dp in cmd.points:
     result.values.append((dp, 12345))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example is fairly stupid but it illustrates the concept. If you
 recall the earlier contents of cmd.points, this would end up assigning the
 value &amp;laquo;12345&amp;raquo; to the &lt;em&gt;cache_hit&lt;/em&gt; as well as &lt;em&gt;cache_miss&lt;/em&gt; datapoints.&lt;/p&gt;

&lt;p&gt;In the real world &amp;laquo;12345&amp;raquo; would be replaced with the value of the actual
 datapoint and not a static value. You can see this in action toward the tail end
 of the &lt;em&gt;processResults&lt;/em&gt; method in the &lt;em&gt;VarnishStat&lt;/em&gt; parser.&lt;/p&gt;

&lt;p&gt;So the simpliest, working version of the parser could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
  from Products.ZenRRD.CommandParser import CommandParser

  class VarnishStat(CommandParser):
      def processResults(self, cmd, result):
        #Do Some Parsing Code
        #....
        for dp in cmd.points:
              result.values.append((dp, 12345)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously you&amp;rsquo;ll want to fill in the parsing code section with real code
 and add error checking, but that minimal amount of code could actually do
 the trick&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Monitoring Template
+++++++++++++++++++++++
At this point we&amp;rsquo;ve got the bare essentials around the command parser. The second
half to making this all work is creating the monitoring template.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start by logging into your Zenoss server UI and navigate to
&lt;em&gt;Monitoring Templates&lt;/em&gt; section of the GUI:
&amp;lsquo;&lt;a href=&#34;http://YourServer:8080/zport/dmd/template&#39;&#34;&gt;http://YourServer:8080/zport/dmd/template&#39;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Next hit the &amp;lsquo;+&amp;rsquo; icon in the lower left corner of your screen. This will open
the &lt;em&gt;Add Template&lt;/em&gt; dialogue box. Give your template a name, I called mine
&lt;em&gt;Varnish3&lt;/em&gt;. Next decide which device class to target. I&amp;rsquo;d suggest targeting the
highest level device class that the software you are parsing could run on. As
an example I&amp;rsquo;m targeting Varnish3 at &lt;em&gt;/Server/Linux&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.. image:: &lt;a href=&#34;https://b9m4pw.bay.livefilestore.com/y2p1DGdLNiQEsWrfVELnbYzxYNFSv6lLLYMS8lwyhPXehm4PYtR5t-LkDCysr1nXr-ch3zRWoBzry8oZMgEwVRyiPAEDFGddtkg8xRh8K4VGm4/AddTemplate.png?psid=1&#34;&gt;https://b9m4pw.bay.livefilestore.com/y2p1DGdLNiQEsWrfVELnbYzxYNFSv6lLLYMS8lwyhPXehm4PYtR5t-LkDCysr1nXr-ch3zRWoBzry8oZMgEwVRyiPAEDFGddtkg8xRh8K4VGm4/AddTemplate.png?psid=1&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now you have an empty template. Click the &amp;lsquo;+&amp;rsquo; icon right under where it says
&amp;lsquo;Data Sources&amp;rsquo;. This is &lt;strong&gt;not&lt;/strong&gt; the same &amp;lsquo;+&amp;rsquo; you just clicked. This will open the
&amp;lsquo;Add Data Source&amp;rsquo; dialogue window.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter the name for your datasource, in my case it was &lt;em&gt;Varnish3Stats&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ensure you select a type of *COMMAND**&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.. image:: &lt;a href=&#34;https://b9m4pw.bay.livefilestore.com/y2pmQK9e8ZodZdiqzuYH1BcVGJcRUXl2zdl6flXVDh8CoFbvhs2EBseIzXKIIm2BxTSAfIN0v1TolVhqqp-qH-rBvxqiXKuNwPh05DT_PkbFcw/AddDataSourceButton.png?psid=1&#34;&gt;https://b9m4pw.bay.livefilestore.com/y2pmQK9e8ZodZdiqzuYH1BcVGJcRUXl2zdl6flXVDh8CoFbvhs2EBseIzXKIIm2BxTSAfIN0v1TolVhqqp-qH-rBvxqiXKuNwPh05DT_PkbFcw/AddDataSourceButton.png?psid=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.. image:: &lt;a href=&#34;https://b9odhg.bay.livefilestore.com/y2pVN8xE5lPpenp2Oqv1975tmrb3lvj7NrVhrHnRNvJtNS6SxCxdRiembBD69zGBTCVqToSzQWDj0P_t6DEpXiRpltUG1amRz4bkfWs4D2OVOU/AddDataSource.png?psid=1&#34;&gt;https://b9odhg.bay.livefilestore.com/y2pVN8xE5lPpenp2Oqv1975tmrb3lvj7NrVhrHnRNvJtNS6SxCxdRiembBD69zGBTCVqToSzQWDj0P_t6DEpXiRpltUG1amRz4bkfWs4D2OVOU/AddDataSource.png?psid=1&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You will now see your new datasource listed in the &amp;lsquo;Data Sources&amp;rsquo; column.
Double click the newly created data source to enter &amp;lsquo;Edit Data Source&amp;rsquo; dialogue
window. There are two critical things to complete in this window&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, you need to be certain you select the new parser you just created.
In my case this is &lt;em&gt;ZenPacks.community.Varnish3.parsers.Varnish3Stat&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Second, you want to populate the &amp;lsquo;Command Template&amp;rsquo; field with the actual
command you want to run. Its worth mentioning again, &lt;strong&gt;this is the actual command
that will get executed&lt;/strong&gt;. In this case its &lt;em&gt;/usr/bin/varnishstat -x&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;One more option to consider is the &amp;lsquo;Use SSH&amp;rsquo; checkbox. Depending on where you
intend the command to be run, you may or may not want to enable this. In my
case I want the &lt;em&gt;varnishstat&lt;/em&gt; command to be executed on the remote host, so
I need to enable that option&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.. image:: &lt;a href=&#34;https://b9m4pw.bay.livefilestore.com/y2peFKklL-L3aVdIOkG4_77TJRcHiOnnM3Q6hSqKqPl8xJLELNTx0QhhwRaNJ7o-7qyUTuTuBbuoEqm-7EJ7N4xSWXHotBU6ujClGn4DDveAqU/EditDataSource.png?psid=1&#34;&gt;https://b9m4pw.bay.livefilestore.com/y2peFKklL-L3aVdIOkG4_77TJRcHiOnnM3Q6hSqKqPl8xJLELNTx0QhhwRaNJ7o-7qyUTuTuBbuoEqm-7EJ7N4xSWXHotBU6ujClGn4DDveAqU/EditDataSource.png?psid=1&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once that is saved you will want to hit the small gear icon just about your newly
created datasource and select &amp;lsquo;Add Data Point&amp;rsquo;. &lt;strong&gt;The name you enter should exactly
match the name of the stat you want to collect&lt;/strong&gt;. Repeat this step for &lt;em&gt;each&lt;/em&gt; stat
you want to collect. Going back to our earlier example we would add one datapoint
named &lt;em&gt;cache_hit&lt;/em&gt; and a second datapoint named &lt;em&gt;cache_miss&lt;/em&gt;. If you recall,
these datapoints you are creating here are what is passed as &lt;em&gt;cmd.points&lt;/em&gt; to
your &lt;em&gt;processResults&lt;/em&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is quite a bit to understand about datapoints which are outside the scope
  of this document. At a high level you should understand what the different types
  of datapoints do, and when one type is appropriate over another. Be sure to
  review section 6.2 of the &lt;code&gt;Zenoss Administration&lt;/code&gt;_ guide as it goes into good
  details about datapoint types.
* You will also want to setup Graph Definitions at this time. This is another topic
  that is covered in section 6.2.8 of the &lt;code&gt;Zenoss Administration&lt;/code&gt;_ guide so I won&amp;rsquo;t
  re-hash it. Here is sample of what my completed template looks like:&lt;/p&gt;

&lt;p&gt;.. image:: &lt;a href=&#34;https://b9m4pw.bay.livefilestore.com/y2ppTfTMLp7HwATzwfb2ao3-f5lqF8akvRtQ42q7StnSJYgR16nztu_5-vcGT-MnxwkDn3NP1g6zzvzjKpW6Sts8fevOm8vVYSsNN8xUZR2oeM/CompletedExample.png?psid=1&#34;&gt;https://b9m4pw.bay.livefilestore.com/y2ppTfTMLp7HwATzwfb2ao3-f5lqF8akvRtQ42q7StnSJYgR16nztu_5-vcGT-MnxwkDn3NP1g6zzvzjKpW6Sts8fevOm8vVYSsNN8xUZR2oeM/CompletedExample.png?psid=1&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you have everything to your liking, we need to add this template to the
ZenPack so it gets exported along with the command parser code we wrote. Using
the gear menu in the lower left of your screen, select &amp;lsquo;Add to ZenPack&amp;rsquo;. You
will be prompted with a list of ZenPacks that are currently in development mode
(allowing updates). Select the ZenPack you created earlier in this document.
In my case that is &lt;em&gt;ZenPacks.community.Varnish3&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.. image:: &lt;a href=&#34;https://b9m4pw.bay.livefilestore.com/y2p-mk2JpG3fTJWeWxQTOri2SXZ9zSe3ZJYaZi6IF3xYVANQwc0bv9IgsMXJ5qA4SEVTfHyNahKa-qPSBpVAqzJeEx6gtw03N6TRyp0zNEOj14/AddToZenPack.png?psid=1&#34;&gt;https://b9m4pw.bay.livefilestore.com/y2p-mk2JpG3fTJWeWxQTOri2SXZ9zSe3ZJYaZi6IF3xYVANQwc0bv9IgsMXJ5qA4SEVTfHyNahKa-qPSBpVAqzJeEx6gtw03N6TRyp0zNEOj14/AddToZenPack.png?psid=1&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;pulling-it-all-together&#34;&gt;Pulling It All Together&lt;/h1&gt;

&lt;p&gt;So at this point you have a working command parser. This command parser is
referenced by your new super-cool monitoring template and life is good. At this point
you could bind your monitoring template to a device or device class and assuming
you&amp;rsquo;ve got things configured correctly, begin collecting the metrics you&amp;rsquo;ve defined
in your monitoring template.&lt;/p&gt;

&lt;p&gt;However, your command parser and template are probably too cool to keep to yourself
so you should really share it with the rest of the Zenoss community. At this point
you need to export your ZenPack. This will result in all your custom code and
template(s) being pulled together into a single redistributable file commonly referred
to as an &amp;laquo;EGG&amp;raquo; file. The EGG file is what users (who are not interested in the
source code) will download and install into their own Zenoss installations.&lt;/p&gt;

&lt;p&gt;Follow the section &amp;lsquo;Install and Test ZenPack in Zenoss&amp;rsquo; in
&lt;code&gt;ZenPack Development Process&lt;/code&gt;_ to export your EGG and get your new ZenPack uploaded
to GitHub.&lt;/p&gt;

&lt;p&gt;Thats it!!!. I know there is a lot of information we only briefly touched on but the
reality is Zenoss is a complex beast. No single document can give you all the
information you need, but my hope is that this document is enough information
for those that are familiar with Zenoss to get started writing a custom command
parser.&lt;/p&gt;

&lt;p&gt;.. External References Below. Nothing Below This Line Should Be Rendered&lt;/p&gt;

&lt;p&gt;.. _ZenPack for use with F5 LTMs: &lt;a href=&#34;http://github.com/dpetzel/ZenPacks.community.f5&#34;&gt;http://github.com/dpetzel/ZenPacks.community.f5&lt;/a&gt;
.. _Zenoss Developer&amp;rsquo;s Guide: &lt;a href=&#34;http://community.zenoss.org/community/documentation/official_documentation/zenoss-dev-guide&#34;&gt;http://community.zenoss.org/community/documentation/official_documentation/zenoss-dev-guide&lt;/a&gt;
.. _Creating Zenoss ZenPacks for Zenoss 3: &lt;a href=&#34;http://community.zenoss.org/docs/DOC-10268&#34;&gt;http://community.zenoss.org/docs/DOC-10268&lt;/a&gt;
.. _ZenPack Development Process: &lt;a href=&#34;http://community.zenoss.org/docs/DOC-8495&#34;&gt;http://community.zenoss.org/docs/DOC-8495&lt;/a&gt;
.. _Zenoss Administration: &lt;a href=&#34;http://community.zenoss.org/community/documentation/official_documentation/zenoss-guide&#34;&gt;http://community.zenoss.org/community/documentation/official_documentation/zenoss-guide&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>