<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Dave&#39;s Site</title>
    <link>http://www.dpetzel.info/categories/programming/</link>
    <description>Recent content in Programming on Dave&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dave@petzel.email (David Petzel)</managingEditor>
    <webMaster>dave@petzel.email (David Petzel)</webMaster>
    <copyright>Â© 2016 David Petzel</copyright>
    <lastBuildDate>Thu, 10 Oct 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.dpetzel.info/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Django 1.2 to 1.5 Upgrade</title>
      <link>http://www.dpetzel.info/post/programming/django-12-to-15-upgrade/</link>
      <pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/programming/django-12-to-15-upgrade/</guid>
      <description>

&lt;p&gt;Recently I kicked off an effort to perform a long over due upgrade of the
version of Django I am using on a project. Without getting into all the gory
details of why, I need to upgrade from Django 1.2 to 1.5. Technically I don&amp;rsquo;t
really have to go to 1.5, but I figure since I&amp;rsquo;m going to be messing with it
anyway I should probably just get current. This post will journal my adventure
down this road for better or worse. Just to satisfy curiosity, I did test
going from 1.2 to 1.5 directly and as expected things blew up horribly.&lt;/p&gt;

&lt;p&gt;Since I knew a ton of stuff had changed my plan attack was going to be to step
through each an upgrade to each major version between 1.2 and 1.5 rather than
attempting to jump straight there. I intend to run my tests with the &lt;code&gt;-Wall&lt;/code&gt;
flags so I can see all the deprecation warnings. Then I&amp;rsquo;ll tackle each
deprecation warning one at a time. There is likely a more efficient means of
doing this sort of thing, but its been so long since I&amp;rsquo;ve messed with this
project I&amp;rsquo;m going to need some time to get reacquainted anyway.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;note&#34;&gt; &lt;strong&gt;NOTE&lt;/strong&gt;
    To protect the innocent, any proprietary information include class names,
    file names, paths etc have been stripped from the code snippets.
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-2-7-to-1-3-7:360fa4c8873dfc38b400dadd8b650a97&#34;&gt;1.2.7 to 1.3.7&lt;/h2&gt;

&lt;p&gt;This wen&amp;rsquo;t really smooth for me. All my unit tests passed and I didn&amp;rsquo;t see
anything immediately broken. There were a few deprecation warnings that I needed
to address however.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    ./django/core/cache/__init__.py:83: PendingDeprecationWarning: settings.CACHE_* is deprecated; use settings.CACHES instead.
  PendingDeprecationWarning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one was pretty cut and dry as the 1.3 release notes had alerted me to this
one: &lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.3/#caching-changes&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.3/#caching-changes&lt;/a&gt;.
Simply changing the structure of that configuration item and all was well.&lt;/p&gt;

&lt;p&gt;Next up was&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    /filename.py:14: DeprecationWarning: A Field class whose get_db_prep_value method hasn&#39;t been updated to take `connection` and `prepared` arguments.
  class MyModelClass(models.Field):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A little google foo later and I ended up on &lt;a href=&#34;http://www.djangopro.com/2011/03/deprecation-warning-with-get_db_prep_value-for-django-1-3/&#34;&gt;http://www.djangopro.com/2011/03/deprecation-warning-with-get_db_prep_value-for-django-1-3/&lt;/a&gt;. The advise was to update to a newer version of &lt;code&gt;django-picklefield&lt;/code&gt;. I reviewed the
dependencies I had defined in the my &lt;code&gt;requirements.txt&lt;/code&gt; and I was using
&amp;lsquo;0.3.0&amp;rsquo;, which was newer than the &amp;lsquo;0.1.9&amp;rsquo; version recommended in the article,
and also appears to be the most current version available on pypi.python.org.&lt;/p&gt;

&lt;p&gt;With that dead end out of the way I then found &lt;a href=&#34;https://docs.djangoproject.com/en/1.3/howto/custom-model-fields/#django.db.models.Field.get_db_prep_value&#34;&gt;https://docs.djangoproject.com/en/1.3/howto/custom-model-fields/#django.db.models.Field.get_db_prep_value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I updated my &lt;code&gt;get_db_prep_value&lt;/code&gt; as follows.
Old:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def get_db_prep_value(self, value):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def get_db_prep_value(self, value, connection, prepared=False):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kicked another test run. No more deprecation warning and tests are all passing!&lt;/p&gt;

&lt;p&gt;Next up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    ./site-packages/Crypto/Util/randpool.py:40: RandomPool_DeprecationWarning: This application uses RandomPool, which is BROKEN in older releases.  See http://www.pycrypto.org/randpool-broken
  RandomPool_DeprecationWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It wasn&amp;rsquo;t really clear to me what I was supposed to do with this information,
so I figured I&amp;rsquo;d start simple and upgrade the version of pycrypto I&amp;rsquo;m using
from 2.3 to the latest available 2.6. This did &lt;em&gt;not&lt;/em&gt; help.. I really have no
clue what to do with this. Since its not coming out directly from a Django
module, I&amp;rsquo;m going to ignore it for now&amp;hellip;.&lt;/p&gt;

&lt;p&gt;Last up was&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    ./site-packages/django/test/simple.py:28: PendingDeprecationWarning: DjangoTestRunner is deprecated; it&#39;s functionality is indistinguishable from TextTestRunner
  PendingDeprecationWarning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recalled there was something about this in the release notes so I reviewed
&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.3/#djangotestrunner&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.3/#djangotestrunner&lt;/a&gt;. Near as
I can tell there is nothing I need to do here, and Django itself will handle
this cleanup in coming versions.&lt;/p&gt;

&lt;p&gt;That concludes my 1.2.7 to 1.3.7 upgrade. I ended up keeping the updated version
of pycrypto just because, so all and all pretty easy so far and only about 2
hours burned on that step.&lt;/p&gt;

&lt;h2 id=&#34;1-3-7-to-1-4-8:360fa4c8873dfc38b400dadd8b650a97&#34;&gt;1.3.7 to 1.4.8&lt;/h2&gt;

&lt;p&gt;With that section out of the way onto reading the 1.4 release notes to see
what gotchas I need to look out for. Based on the information in the release
notes here are the items I expect will require some attention:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.4/#django-conf-urls-defaults&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.4/#django-conf-urls-defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.4/#django-contrib-admin&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.4/#django-contrib-admin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An initial test run after upgrading, but before any changes, is showing that the
media stuff is indeed an issue, and I have several deprecation warnings related
to items addressed in the release notes. This isn&amp;rsquo;t going to be as easy as the
jump to 1.3.7 was&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m opting to tackle the broken things first, and then I&amp;rsquo;ll address the
deprecation warnings. So first up I&amp;rsquo;ve made a few customizations to my
settings.py file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I added &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; to my &lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Next I renamed my &lt;em&gt;media&lt;/em&gt; folder to &lt;em&gt;static&lt;/em&gt;. I don&amp;rsquo;t have user uploaded media
so this folder was for the purpose of static assets. And based on the
documentation media is intended to be used for user generated content.&lt;/li&gt;
&lt;li&gt;I added &lt;code&gt;STATIC_URL = &#39;/static/&#39;&lt;/code&gt; to my &lt;code&gt;settings.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Updated my templates to use the new static template tag as described in
&lt;a href=&#34;https://docs.djangoproject.com/en/dev/howto/static-files/&#34;&gt;https://docs.djangoproject.com/en/dev/howto/static-files/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While a bit tedious, that wasn&amp;rsquo;t to bad. At this point all of my tests are still
passing, but I do have some &lt;code&gt;PendingDeprecationWarning&lt;/code&gt; warnings to deal with.
I suppose since the are Pending, I could procrastinate, but I&amp;rsquo;m in here now, so
biting the bullet and going after them..&lt;/p&gt;

&lt;p&gt;First up&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   ./site-packages/django/core/management/__init__.py:455: PendingDeprecationWarning: The &#39;execute_manager&#39; function is deprecated, you likely need to update your &#39;manage.py&#39;; please see the Django 1.4 release notes (https://docs.djangoproject.com/en/dev/releases/1.4/).
  PendingDeprecationWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My imports worked out in such a way that I didn&amp;rsquo;t need to relocate the manage.py
file so all I did was swap out the contents as outlined in &lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.4/#updated-default-project-layout-and-manage-py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alas, something busted though. After swapping out the contents of manage.py I
ended up with errors when trying to kick off my tests. I&amp;rsquo;m using the
django-jenkins app for my tests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   ./virtualenv/bin/python -Wall my_project/manage.py jenkins
   Unknown command: &#39;jenkins&#39;
   Type &#39;manage.py help&#39; for usage.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t see anything immediately obvious jump out at me so I started by
updating from django-jenkins 0.11.1 to 0.14.0. No improvment (but I&amp;rsquo;m gonna
keep the newer version just the same).&lt;/p&gt;

&lt;p&gt;Upon further inspection of &lt;code&gt;manage.py --help&lt;/code&gt; I noticed alot of the subcommands
were missing. In fact all I saw were the &lt;code&gt;[django]&lt;/code&gt; ones. So I moved my
&lt;code&gt;manage.py&lt;/code&gt; up one directory as discussed in the readme and all the subcommands
reappeared, including jenkins. So that was good, but the crappy things is
all my tests started failing&amp;hellip; So into the weeds of import cleanup I go..
This turned out to be much easier than I thought. All I needed was to change
ROOT_URLCONF = &amp;lsquo;urls&amp;rsquo;&lt;code&gt;to ROOT_URLCONF = &#39;my_project.urls&#39;&lt;/code&gt; and all of
tests started passing again. Added bonus, my PendingDeprecationWarning was gone.&lt;/p&gt;

&lt;p&gt;Next up&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   ./site-packages/django/conf/__init__.py:75: DeprecationWarning: The ADMIN_MEDIA_PREFIX setting has been removed; use STATIC_URL instead.
  &amp;quot;use STATIC_URL instead.&amp;quot;, DeprecationWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one is easy enough, I had already added STATIC_URL when I fixed up things
earlier, so I just removed ADMIN_MEDIA_PREFIX from my settings.py&lt;/p&gt;

&lt;p&gt;It appears in the process of cleaning up some of the media stuff I also cleared
up some of the other DeprecationWarning messages. So at this point all my tests
are passing and no DeprecationWarning messages (aside from
&lt;code&gt;RandomPool_DeprecationWarning&lt;/code&gt; from earlier that I opted to ignore). Onto
the final leg! Total time in this leg minus distractions was about 2.5 hours&lt;/p&gt;

&lt;h2 id=&#34;1-4-8-to-1-5-4:360fa4c8873dfc38b400dadd8b650a97&#34;&gt;1.4.8 to 1.5.4&lt;/h2&gt;

&lt;p&gt;Upon an initial pass through the 1.5 release notes I was feeling pretty good
as I didn&amp;rsquo;t see anything in there I though would affect me. My tests said
otherwise (&lt;strong&gt;80% failure rate&lt;/strong&gt;). The common theme seemed to be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   from django.views.generic.simple import direct_to_template, redirect_to
   ImportError: No module named simple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm&amp;hellip;. obviously I missed the memo somewhere&amp;hellip;Turns out I didn&amp;rsquo;t put two and
two together back in the my 1.3 steps as its called out there
&lt;a href=&#34;https://docs.djangoproject.com/en/dev/releases/1.3/#function-based-generic-views&#34;&gt;https://docs.djangoproject.com/en/dev/releases/1.3/#function-based-generic-views&lt;/a&gt;.
Not to sure why I didn&amp;rsquo;t get any deprecation warnings along the way but oh well
lets get that fixed up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/11428427/no-module-named-simple-error-in-django&#34;&gt;http://stackoverflow.com/questions/11428427/no-module-named-simple-error-in-django&lt;/a&gt;
was the only remotely useful link I came up with in the first couple minutes
of searching. The common thread seems to stem from my urls.py file.&lt;/p&gt;

&lt;p&gt;It seems I have a sprinkling of &lt;code&gt;direct_to_template&lt;/code&gt; and &lt;code&gt;redirect_to&lt;/code&gt; being
used. Its fairly clear that I need to switch from &lt;em&gt;Function-based generic views&lt;/em&gt;
to &lt;em&gt;Class-based generic views&lt;/em&gt;, and as luck would have it the documentation has
an awesome mapping to pull that off at &lt;a href=&#34;https://docs.djangoproject.com/en/1.3/topics/generic-views-migration/&#34;&gt;https://docs.djangoproject.com/en/1.3/topics/generic-views-migration/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is what I did to my urls.py.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replaced &lt;code&gt;from django.views.generic.simple import direct_to_template, redirect_to&lt;/code&gt;
with &lt;code&gt;from django.views.generic.base import TemplateView, RedirectView&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replaced &lt;code&gt;redirect_to&lt;/code&gt; references with RedirectView as outlined in that
migration page&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;direct_to_template&lt;/code&gt; references with TemplateView as outlined in
that migration page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First I had something like this (some legacy stuff to handle when URLs changed)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   (r&#39;^base_prefix/(?P&amp;lt;new_url&amp;gt;.*)$&#39;, redirect_to, {&#39;url&#39;: &#39;/%(new_url)s&#39;}),
   changed to
   (r&#39;^base_prefix/(?P&amp;lt;new_url&amp;gt;.*)$&#39;, RedirectView.as_view(url={&#39;url&#39;: &#39;/%(new_url)s&#39;})),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That one seemed easy enough, however the next one is nastier.. Making it worse
was it was something I didn&amp;rsquo;t write so I had to figure out the previous
functionality first, before I could move forward. So I had a line that looked
like &lt;code&gt;(r&#39;^bar&#39;, direct_to_template, {&#39;template&#39;: &#39;foo/bar.html&#39;}, &#39;bar&#39;),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It took me a bit to figure out that the last &lt;em&gt;bar&lt;/em&gt; was actually just a
&lt;code&gt;named url pattern &amp;lt;https://docs.djangoproject.com/en/1.2/topics/http/urls/#naming-url-patterns&amp;gt;&lt;/code&gt;_&lt;/p&gt;

&lt;p&gt;So a simple switch of that call over to &lt;code&gt;(r&#39;^bar&#39;, TemplateView.as_view(template_name=&#39;foo/bar.html&#39;), &#39;bar&#39;),&lt;/code&gt;
and we&amp;rsquo;re moving along.&lt;/p&gt;

&lt;p&gt;Next up is more generic view good times&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   from django.views.generic import list_detail
   ImportError: cannot import name list_detail
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case this actually turned out to be an unused import, so I simply
removed it.&lt;/p&gt;

&lt;p&gt;From there I had to a bunch of conversions of my url template tags as outlined
in the release notes. So I had a lot of references like
{% raw %}&lt;code&gt;{% url myproject.myapp.views.someview arg1%}&lt;/code&gt;{% endraw %} and I had to change those to
{% raw %}&lt;code&gt;{% url &amp;quot;myproject.myapp.views.someview&amp;quot; arg1%}&lt;/code&gt;{% endraw %}.&lt;/p&gt;

&lt;p&gt;At this point I&amp;rsquo;m back to 100% testing pass rate and a single (simple)
deprecation message to handle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   ./site-packages/django/conf/__init__.py:147: PendingDeprecationWarning: The TEMPLATE_DIRS setting must be a tuple. Please fix your settings, as auto-correction is now deprecated.
     PendingDeprecationWarning)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wish they were all this easy. I went from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;   TEMPLATE_DIRS = os.path.join(PROJECT_DIR, &#39;templates&#39;)
   to
   TEMPLATE_DIRS = (os.path.join(PROJECT_DIR, &#39;templates&#39;),)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:360fa4c8873dfc38b400dadd8b650a97&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall the process wasn&amp;rsquo;t terrible, but it was certainly not a cake walk either.
By the time it was all said and done, it took me about 2 days (including
randomizations and interruptions). As usual the Django documentation was
invaluable in being to pull this off.&lt;/p&gt;

&lt;p&gt;The app has been running for a few days now and so far no unexpected explosions,
however I should note I have been getting some random reports of CSRF errors
since the upgrade (1 or 2 reports a day). Overall most people are having no
issues, and I haven&amp;rsquo;t gotten too deep into that investigation, but it is
certainly new behavior.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures in Django Performance Analysis</title>
      <link>http://www.dpetzel.info/post/programming/adventures_in_django_performance_analysis/</link>
      <pubDate>Sun, 22 Sep 2013 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/programming/adventures_in_django_performance_analysis/</guid>
      <description>

&lt;p&gt;Nothing to eye opening here but I wanted to collect some thoughts and insights
I had this week. While I&amp;rsquo;m more of an operations guy, a while back I hacked
up a &lt;code&gt;Django&lt;/code&gt; based web application which uses &lt;code&gt;Celery&lt;/code&gt; and &lt;code&gt;RabbitMQ&lt;/code&gt;. I have
recent set out to do some performance analysis on it.&lt;/p&gt;

&lt;p&gt;Its not an application that sees much traffic as it was created to serve a niche
internal purpose, but it does handle web requests which result in potentially
long running background tasks.&lt;/p&gt;

&lt;p&gt;There are a few pages and process that are painfully slow. So this week I set
out to improve some of slower components of the application. I felt like I had
a pretty good idea of what sucked and why but I wanted to gather some metrics
first so I could understand if the changes I was going to make were the right
changes to make. As of today, I&amp;rsquo;ve not made any code changes to improve
performance, but I wanted to collect my observations after having adding some
instrumentation.&lt;/p&gt;

&lt;h2 id=&#34;new-relic-integration&#34;&gt;New Relic Integration&lt;/h2&gt;

&lt;p&gt;At work &lt;code&gt;New Relic&lt;/code&gt; has been getting a lot of buzz for the magic it works on
Java based applications. I was aware they had some &lt;code&gt;Python&lt;/code&gt; integration, but
up until this week I had not looked too closely at it. To be fair I still don&amp;rsquo;t
think I&amp;rsquo;ve spent enough time reading all their documentation to fully appreciate
all they have to offer, as I was pretty focused on integration with my &lt;code&gt;Django&lt;/code&gt;
application.&lt;/p&gt;

&lt;p&gt;The first thing I noticed was my &amp;laquo;google-foo&amp;raquo; was failing on producing anything
useful.  I got as far as &lt;a href=&#34;http://newrelic.com/python/django&#34;&gt;http://newrelic.com/python/django&lt;/a&gt; which is a great
marketing page, but I needed the technical know-how on how to hook things up.
(I&amp;rsquo;m a &lt;code&gt;New Relic&lt;/code&gt; noob all the way around). What I thought was interesting here is
once I did find their documentation it was tremendous, so it was odd that my
searches had been coming up so dry&amp;hellip;&lt;/p&gt;

&lt;p&gt;I read through the bits and pieces on &lt;a href=&#34;https://newrelic.com/docs/python/&#34;&gt;https://newrelic.com/docs/python/&lt;/a&gt;.
I was starting to get pretty excited as this looked like it was going to be really
easy. &lt;a href=&#34;https://newrelic.com/docs/python/python-agent-integration&#34;&gt;https://newrelic.com/docs/python/python-agent-integration&lt;/a&gt; seemed to have
all the key pieces I needed, so I got to work.&lt;/p&gt;

&lt;p&gt;I run my application under a &lt;code&gt;virtualenv&lt;/code&gt; so I added &lt;code&gt;newrelic&lt;/code&gt; to my
requirements.txt and ran a quick &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;. The
package was installed without any issues. No crazy dependencies and no compile
errors (which are all to uncommon when installing packages with pip).&lt;/p&gt;

&lt;p&gt;Next up for me was getting the agent registered with my web server
(Apache running mod_wsgi). They offer several ways of doing doing things, but I
settled on the &lt;em&gt;Manual integration with code&lt;/em&gt; approach. So I added the following
to my wsgi script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    import newrelic.agent
    try:
        nr_conf = os.path.join(project_folder, &amp;quot;conf&amp;quot;, &amp;quot;newrelic-django.conf&amp;quot;)
        newrelic.agent.initialize(nr_conf)
    except newrelic.api.exceptions.ConfigurationError:
        logger.warn(&amp;quot;Failed loading New Relic config: {0}&amp;quot;.format(nr_conf))
except ImportError:
    logger.error(&amp;quot;Failed to import newrelic agent&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This deviates just a touch from their example so let me explain the key pieces
here. &lt;code&gt;project_folder&lt;/code&gt; is a variable that was already in my wsgi_script and
is simply the path to where all my code lives. I&amp;rsquo;m storing the &lt;code&gt;newrelic-django.conf&lt;/code&gt;
in a &lt;code&gt;conf&lt;/code&gt; sub-folder. The examples on the &lt;code&gt;New Relic&lt;/code&gt; site worked, but for
me I wanted to be sure that if anything was wrong with the agent or the
configuration file it wouldn&amp;rsquo;t hinder my apps ability to start. As a result I
wrapped their example with some try/except blocks and logging.&lt;/p&gt;

&lt;p&gt;About 2-3 minutes after restarting Apache on my local development VM where I
was testing this, I started seeing very detailed statistics in &lt;code&gt;New Relic&lt;/code&gt;.
I was in awe for several minutes at the insane level of detail they were able
to collect including database query times and mapping out my downstream
dependencies. It was truly amazing!&lt;/p&gt;

&lt;p&gt;I did however notice that none of my &lt;code&gt;Celery&lt;/code&gt; tasks were getting any information.
I did recall I had read that had to be handle separately. So this lead me
to &lt;a href=&#34;https://newrelic.com/docs/python/python-agent-and-celery&#34;&gt;https://newrelic.com/docs/python/python-agent-and-celery&lt;/a&gt;. I&amp;rsquo;m running
&lt;code&gt;Celery&lt;/code&gt; under &lt;code&gt;runit&lt;/code&gt; so I had to update my run script. In the process I learned
a little more about runit and environment variables (I&amp;rsquo;m still pretty new to
using &lt;code&gt;runit&lt;/code&gt;). &lt;a href=&#34;http://smarden.org/runit/chpst.8.html&#34;&gt;http://smarden.org/runit/chpst.8.html&lt;/a&gt; is where they discuss this
but for me it was not immediately clear. Here is what I did:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a new directory in the &lt;em&gt;same directory&lt;/em&gt; as my run script. I named it
&lt;code&gt;env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In my &lt;code&gt;env&lt;/code&gt; directory I created a file called &lt;code&gt;NEW_RELIC_CONFIG_FILE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I populated &lt;code&gt;env/NEW_RELIC_CONFIG_FILE&lt;/code&gt; with the path to my configuration
file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So now when &lt;code&gt;runit&lt;/code&gt; kicks off my celeryd process it will have the proper
environment variable set.&lt;/p&gt;

&lt;p&gt;So now it was time to update my run script. Here is what it looked like before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;exec /usr/bin/env chpst -u myapps_user \
  path_to_virtualenv/bin/python \
  path_to_my_code/manage.py \
  celeryd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is what it looked like after. As you can see not all that different:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;	exec /usr/bin/env chpst -e env -u myapps_user \
	  path_to_virtualenv/bin/python \
	  path_to_virtualenv/bin/newrelic-admin run-program \
	  path_to_virtualenv/bin/python \
	  path_to_my_code/manage.py \
	  celeryd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restarted my service and sure enough in just a minute or two I had stats showing
up in &lt;code&gt;New Relic&lt;/code&gt;. I will say it didn&amp;rsquo;t have quite the awe inspiring level of
detail that the web application had, but still pretty awesome for making 0 code
changes, and simply starting up using their wrapper.&lt;/p&gt;

&lt;p&gt;That was it, up and running in about about 1.5 hours including time to read
the documentation. Lets ship it!!.&lt;/p&gt;

&lt;p&gt;I rolled out my updated code to QA and started seeing &lt;strong&gt;nothing&lt;/strong&gt;. WTF&amp;hellip;.
Trolling through the logs I found this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;newrelic.core.data_collector WARNING - Data collector is not contactable via the proxy host &#39;myproxyhost&#39; on port 8080 with proxy user of None. This can be because of a network issue or because of the data collector being restarted. In the event that contact cannot be made after a period of time then please report this problem to New Relic support for further investigation. The error raised was SSLError(SSLError(SSLError(&#39;_ssl.c:489: The handshake operation timed out&#39;,),),).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I was prepared a bit for this as I knew I&amp;rsquo;d be running behind a proxy server
so I had planned for this and included proxy configuration in my configuration
INI file. Assuming I had done something wrong I reviewed the proxy related
information in &lt;a href=&#34;https://newrelic.com/docs/python/python-agent-configuration&#34;&gt;https://newrelic.com/docs/python/python-agent-configuration&lt;/a&gt;.
Everything looked correct. Typical debugging ensues without any luck. So I
start hacking a ton of debugging output into their agent code and learned that
the HTTP end point I&amp;rsquo;m failing on is &lt;code&gt;https://collector.newrelic.com/agent_listener/invoke_raw_method&lt;/code&gt;.
Using curl from the command line I&amp;rsquo;m able to confirm proxy connectivity is
working. Several more WTF&amp;rsquo;s follow.. While I don&amp;rsquo;t pretend to fully understand
all the moving pieces I was able to see their agent is using the requests library
and the dictionary they were passing for proxies looked different than the
&lt;code&gt;examples on the requests site &amp;lt;http://www.python-requests.org/en/latest/user/advanced/#proxies&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The newrelic agent was using &lt;code&gt;{&#39;https&#39;: &#39;myproxyhost:8080&#39;}&lt;/code&gt;,
however requests shows it as &lt;code&gt;{&#39;https&#39;: &#39;http://myproxyhost:8080&#39;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is how I had my agent INI originally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt; proxy_host = myproxyhost
 proxy_port = 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I changed it to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;proxy_host = http://myproxyhost
proxy_port = 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a restart everything was working fine and I was seeing stats from my
nodes behind my proxy server. Success!!. While I think this is actually a bug
in their agent code, I was happy to see I would work around it with a
configuration change.&lt;/p&gt;

&lt;h2 id=&#34;memcached-vs-locmem&#34;&gt;Memcached Vs Locmem&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve got a few instances of my application running and early on I had added some
&lt;strong&gt;very&lt;/strong&gt; basic caching. Early on there was only a single instance so I thought
I was doing myself a favor by keeping things simple and using the &lt;code&gt;locmem&lt;/code&gt;
cache backend. When the time came to scale up to more instances I knew this was
not the best approach as cache was not being shared across instances and if
wanted to run with multiple Apache processes those processes, even though there
under the same instance of Apache, were not actually sharing cache. I should note
that the reason for adding more instances wasn&amp;rsquo;t load related, but simply to
avoid having a single point of failure. So at that time I didn&amp;rsquo;t explore
switching to Memcached as I didn&amp;rsquo;t really want to change anything, I just
wanted more instances to avoid the SPF.&lt;/p&gt;

&lt;p&gt;Fast-forward and I figured since I&amp;rsquo;m focused on the subject let me eliminate
what I know is an inefficiency and switch to Memcached so all my instances
are now sharing cache. Since I had recently hooked up New Relic I had some
really great statistics. I could see, on average, one of the more frequent
pages of the application were taking about 2 seconds (horrible I know.. I knew it
was slow, but was ashamed when I saw just how slow it really was).  So I updated
my configuration to use a &lt;strong&gt;remote&lt;/strong&gt; (not on the same box) Memcached cluster.
I didn&amp;rsquo;t make any other changes to code or configuration, yet as soon as I rolled
out I saw an average of about 700ms reduction in response time. That warrants
repeating&amp;hellip;. &lt;strong&gt;Doing nothing except changing from locmem to Memcached resulted
in around 700ms of reduced page load time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I am not suggesting that locmem is bad. In fact, when I first implemented it
made a pretty large improvement, but it was very interesting see to how much
of an improvement Memcached made, considering we were going from in process
cache to an external (across the network) cache. My take away from this was
that there are cases were a remote cache can actually be more beneficial than
a local cache, if your sharing information across many instances.&lt;/p&gt;

&lt;h2 id=&#34;celery-apply-vs-apply-async&#34;&gt;Celery apply vs apply_async&lt;/h2&gt;

&lt;p&gt;The last thing I poked at this week was usage of &lt;code&gt;Celery&lt;/code&gt;&amp;rsquo;s &lt;code&gt;apply()&lt;/code&gt; method
vs &lt;code&gt;apply_aysync&lt;/code&gt;. For those that don&amp;rsquo;t know the difference, &lt;code&gt;apply_async&lt;/code&gt;
will drop a message onto the queue and wait for celeryd to process it
asynchronously. Using &lt;code&gt;apply()&lt;/code&gt; is defined as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Execute this task locally, by blocking until the task returns&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was curious what sort of overhead was involved in the process of dropping the
message onto the queue. I created a task that did no actual work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;from celery.task import task

@task
def test_task():
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that I timed the calls to both &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;apply_aysync&lt;/code&gt;. On my
system, where &lt;code&gt;RabbitMQ&lt;/code&gt; is running on the same box (so no network hops
involved in this test), &lt;code&gt;apply()&lt;/code&gt; would run the task in about 3-4ms while
&lt;code&gt;apply_aysync&lt;/code&gt; ranged between 13-16ms with occasional anomalies of 30-34ms.&lt;/p&gt;

&lt;p&gt;For my purposes this is plenty fast enough, but I was a little surprised to
see that level of overhead.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In summary, it was an interesting set of exercises and for the most part
confirmed many of my suspicions, but its nice to finally have some real
metrics around this. Now that I&amp;rsquo;m measuring all this great stuff its time to
start improving it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cloud Zoom Is Blocking My Modal Dialog Box</title>
      <link>http://www.dpetzel.info/post/programming/Cloud%20Zoom%20Is%20Blocking%20My%20Modal%20Dialog%20Box/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/programming/Cloud%20Zoom%20Is%20Blocking%20My%20Modal%20Dialog%20Box/</guid>
      <description>&lt;p&gt;The issue I was having is that the Cloud Zoom enhanced image was being
displayed in front of my drop down menu as well as my modal dialog box. At
first I had only noticed the issue on the drop menu, and was having a hard time
figuring out what was going on, and thought perhaps I had done something wrong
on the superfish menu. Once I noticed it was also affecting my modal dialog,
I became suspicious of cloud zoom.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve got a page that is using a few different jQuery dependent features/functions.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m using the superfish drop down menu&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m also using the jQuery UI Dialog for a modal dialog box&lt;/li&gt;
&lt;li&gt;And finally, I&amp;rsquo;m using Cloud Zoom for some image excitement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I went through and tried a few different things, and finally just disabled
cloud zoom. At that point my drop down menu was now correctly displayed over
top of the image. I spent some time looking through the cloud-zoom site with no
luck. I spent quite a bit of time googling with no luck.&lt;/p&gt;

&lt;p&gt;I turned my attention to the jQuery UI documentation for anything that might be
a clue. I was reading through the various options and came upon the zIndex
option. I had no idea what zIndex was (I am no jQuery expert). Long story short,
I finally got to this article: &lt;a href=&#34;http://zenverse.net/how-to-fix-superfish-dropdown-menu-that-appear-under-floating-divs-in-ie6/&#34;&gt;http://zenverse.net/how-to-fix-superfish-dropdown-menu-that-appear-under-floating-divs-in-ie6/&lt;/a&gt;
So I randomly picked a stupid high zIndex (100,000), and sure enough it worked!
So the question of the day is WHY? and what is the value of zIndex I need to
use? Well on a hunch I started digging through the cloud zoom javascript and
found line 350::&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  $(this).wrap(&#39;&amp;lt;div id=&amp;quot;wrap&amp;quot; style=&amp;quot;top:0px;z-index:9999;position:relative;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So Cloud Zoom is using 9999. Any other components that has a z-index lower
than that will be displayed behind my images. So of course, I put this to the
test. I set my z-index to 10,000 on my menu and 10,001 on my modal dialog.&lt;/p&gt;

&lt;p&gt;A quick refresh and everything is working perfect!. zIndex&amp;hellip; who knew&amp;hellip;&lt;/p&gt;

&lt;p&gt;In case you are wondering, yes I did test an iteration with the index of the
menu and modal dialog set to be lower than 9999 and as expected they were
hidden by the cloud zoom image.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sending an SMTP email in Python 3</title>
      <link>http://www.dpetzel.info/post/programming/sending_an_smtp_email_in_python_3/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/programming/sending_an_smtp_email_in_python_3/</guid>
      <description>&lt;p&gt;This took me far longer than it should have, and while I&amp;rsquo;d like to blame
shotty documentation and sparse examples it was probably my own stupidity
causing the issue. Whatever the case maybe I wanted to jot down my results
as I&amp;rsquo;m sure I&amp;rsquo;ll need to do this again.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like go on a rant about how much harder this was than it should be and how
an easier module should exist. However, the fact that I can&amp;rsquo;t write an easier
module lends itself to the &amp;laquo;Don&amp;rsquo;t Complain, Contribute&amp;raquo; motto, so I&amp;rsquo;ll settle
on the belief that its not easier for a good reason, and maybe one day if I
ever get really good at Python I can make it easier.&lt;/p&gt;

&lt;p&gt;For the time challenged people who don&amp;rsquo;t want to read, here is the condensed
version with no explanation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import smtplib
import string

subject = &amp;quot;My Wicked Cool Subject Line&amp;quot;
to = &amp;quot;rec1@domain1.com,rec2@domain.com&amp;quot;.split(&amp;quot;,&amp;quot;)
from = &amp;quot;sender@domain.com&amp;quot;
body_text = &amp;quot;Enter the contents of your body here&amp;quot;
body = &amp;quot;From: {0} \r\n \
        To: {1} \r\n \
        Subject: {2} \r\n \
        {3} \r\n&amp;quot;.format(FROM, &amp;quot;, &amp;quot;.join(TO), SUBJECT, text)
server = smtplib.SMTP(&amp;quot;YourSMTPServerName&amp;quot;,YourSMTPServerPort)
server.login(&amp;quot;you@yourdomain.com&amp;quot;,&amp;quot;yourpassword&amp;quot;)
server.set_debuglevel(1)
server.sendmail(from, to, body)
server.quit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those that want a little more explanation, aside from reading the python
docs, I&amp;rsquo;ve added some quick notes around some of the stuff that is not uber
obvious. So the first thing we need is the SMTP module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import smtplib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we&amp;rsquo;ll need the string module. Quite likely there are other ways to
accomplish this, but this is the method I took:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following is using some variables to over-simplify the whole mess,
but you should get the idea:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;subject = &amp;quot;My Wicked Cool Subject Line&amp;quot;
#add as many as you need separated by commas
to = &amp;quot;rec1@domain1.com,rec2@domain.com&amp;quot;.split(&amp;quot;,&amp;quot;)
from = &amp;quot;sender@domain.com&amp;quot;
#obviously you can dynamically generate this variable.
body_text = &amp;quot;Enter the contents of your body here&amp;quot;
#didn&#39;t bother to read all the gory details, but from what I gather
# This approach is used to set some SMTP headers, and munch everything
# into a single body entity.
body = &amp;quot;From: {0} \r\n \
        To: {1} \r\n \
        Subject: {2} \r\n \
        {3} \r\n&amp;quot;.format(FROM, &amp;quot;, &amp;quot;.join(TO), SUBJECT, text)
#This part is pretty cool. It uses the new format method in lieu of the
# older %s approach. Honestly I find it simpler than the %s approach.

server = smtplib.SMTP(&amp;quot;YourSMTPServerName&amp;quot;,YourSMTPServerPort)
#You only need if your not connecting to the defacto standard 25.

#This line is needed because my SMTP server requires Auth. If yours doesnt
# Omit this.
server.login(&amp;quot;you@yourdomain.com&amp;quot;,&amp;quot;yourpassword&amp;quot;)

#I&#39;m curious and wanted to see what was happening. So I flipped on debugging.
server.set_debuglevel(1)
# Fire Away!
server.sendmail(from, to, body)
#End you session.
server.quit()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Template Generated Array in Velocity</title>
      <link>http://www.dpetzel.info/post/programming/template_generated_array_in_velocity/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate>
      <author>dave@petzel.email (David Petzel)</author>
      <guid>http://www.dpetzel.info/post/programming/template_generated_array_in_velocity/</guid>
      <description>&lt;p&gt;Today I was trying to do something in a velocity template that I found to be a little
harder than I would have guessed. I was trying to manually generate an array from within my template.
I had a single template that I needed to wrap some super crude IP checking around. I have a couple of
ip addresses which are allowed to see the template code, but everyone else should get the boot.&lt;/p&gt;

&lt;p&gt;Now, I don&amp;rsquo;t write a lot of code, let alone Velocity code, so I figured I&amp;rsquo;d hit up the
user documentation for Velocity: &lt;a href=&#34;http://velocity.apache.org/engine/devel/user-guide.htm&#34;&gt;http://velocity.apache.org/engine/devel/user-guide.htm&lt;/a&gt;.
Would you believe I found nothing of the sorts? I found how to loop through an existing array,
but nothing on creating a new one from within the template.&lt;/p&gt;

&lt;p&gt;Well, after some Googling I found a few newsgroup posts. I wanted to capture the syntax here,
as it was incredibly easy. And just as if you had been provided the array from underlying Java code
you can loop through your template generated array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;#set($AllowedIPs= [&amp;quot;1.1.1.1&amp;quot;,&amp;quot;2.2.2.2&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it. I couldn&amp;rsquo;t believe it took me more than 30 seconds to find this :(. In any event
if anyone is curious the code looks a bit like the following.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The system on which the code is running, provides access to a variable (&lt;code&gt;$remoteIPAddress&lt;/code&gt;)
which is the client IP. Without that provided variable this will of course not work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;#set($AllowedIPs= [&amp;quot;1.1.1.1&amp;quot;,&amp;quot;2.2.2.2&amp;quot;])
#foreach($IpAddress in $AllowedIPs)
   #if($remoteIPAddress eq $IpAddress)
      ## Do Whatever you need in here, and it will only happen
      ## For authorized IP addresses
   #end
#end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>